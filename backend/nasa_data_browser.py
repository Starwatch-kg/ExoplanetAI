"""
NASA Data Browser
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ NASA –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞
"""

import asyncio
import aiohttp
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
import logging
from datetime import datetime, timedelta
import json
import time
from urllib.parse import urlencode

logger = logging.getLogger(__name__)

class NASADataBrowser:
    """
    –ë—Ä–∞—É–∑–µ—Ä –¥–∞–Ω–Ω—ã—Ö NASA –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞
    """
    
    def __init__(self):
        # NASA API endpoints
        self.MAST_BASE_URL = "https://mast.stsci.edu/api/v0.1"
        self.EXOPLANET_ARCHIVE_URL = "https://exoplanetarchive.ipac.caltech.edu/TAP/sync"
        
        # –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.data_cache = {}
        self.cache_timeout = 3600  # 1 —á–∞—Å
        
        # –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        self.request_delay = 1.0  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.last_request_time = 0
        
    async def search_target(self, target_name: str, catalog: str = "TIC") -> Dict:
        """
        –ü–æ–∏—Å–∫ —Ü–µ–ª–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö NASA
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ü–µ–ª–∏ {target_name} –≤ –∫–∞—Ç–∞–ª–æ–≥–µ {catalog}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"target_{catalog}_{target_name}"
            if self._check_cache(cache_key):
                return self.data_cache[cache_key]['data']
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
            if catalog == "TIC":
                result = await self._search_tic_target(target_name)
            elif catalog == "KIC":
                result = await self._search_kic_target(target_name)
            elif catalog == "EPIC":
                result = await self._search_epic_target(target_name)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–∞—Ç–∞–ª–æ–≥: {catalog}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._save_to_cache(cache_key, result)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–∏: {e}")
            return self._get_fallback_target_info(target_name, catalog)
    
    async def get_lightcurve_data(self, target_name: str, mission: str = "TESS",
                                sector: Optional[int] = None) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞ –∏–∑ NASA
        """
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞ –¥–ª—è {target_name} ({mission})")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"lightcurve_{mission}_{target_name}_{sector}"
            if self._check_cache(cache_key):
                return self.data_cache[cache_key]['data']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∏—Å—Å–∏–∏
            if mission == "TESS":
                result = await self._get_tess_lightcurve(target_name, sector)
            elif mission == "Kepler":
                result = await self._get_kepler_lightcurve(target_name)
            elif mission == "K2":
                result = await self._get_k2_lightcurve(target_name)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–∏—Å—Å–∏—è: {mission}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._save_to_cache(cache_key, result)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞: {e}")
            return self._get_fallback_lightcurve(target_name, mission)
    
    async def get_confirmed_planets(self, target_name: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ö
        """
        logger.info(f"ü™ê –ü–æ–∏—Å–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç –¥–ª—è {target_name}")
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ NASA Exoplanet Archive
            query = f"""
            SELECT pl_name, pl_orbper, pl_tranmid, pl_trandur, pl_trandep, 
                   pl_rade, pl_masse, st_rad, st_mass, st_teff
            FROM ps 
            WHERE hostname LIKE '%{target_name}%' OR pl_hostname LIKE '%{target_name}%'
            """
            
            params = {
                'query': query,
                'format': 'json'
            }
            
            await self._rate_limit()
            
            async with aiohttp.ClientSession() as session:
                async with session.get(self.EXOPLANET_ARCHIVE_URL, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self._process_planet_data(data)
                    else:
                        logger.warning(f"Exoplanet Archive –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status}")
                        return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö: {e}")
            return []
    
    async def _search_tic_target(self, target_name: str) -> Dict:
        """–ü–æ–∏—Å–∫ –≤ TIC –∫–∞—Ç–∞–ª–æ–≥–µ"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ MAST
        query = {
            "service": "Mast.Catalogs.Filtered.Tic",
            "format": "json",
            "params": {
                "columns": "ID,ra,dec,pmRA,pmDEC,plx,GAIAmag,Tmag,Teff,logg,MH,rad,mass,rho,lumclass,d,ebv,numcont,contratio,priority",
                "filters": [
                    {
                        "paramName": "ID",
                        "values": [{"min": int(target_name), "max": int(target_name)}]
                    }
                ]
            }
        }
        
        result = await self._make_mast_request(query)
        
        if result and result.get('data'):
            tic_data = result['data'][0]
            return self._format_tic_data(tic_data)
        else:
            raise ValueError(f"TIC {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def _search_kic_target(self, target_name: str) -> Dict:
        """–ü–æ–∏—Å–∫ –≤ KIC –∫–∞—Ç–∞–ª–æ–≥–µ"""
        
        query = {
            "service": "Mast.Catalogs.Filtered.Kic",
            "format": "json",
            "params": {
                "columns": "kepid,ra,dec,pmra,pmdec,umag,gmag,rmag,imag,zmag,gredmag,d51mag,jmag,hmag,kmag,kepmag,kp_teff,kp_logg,kp_feh,kp_ebminusv,kp_radius,kp_mass",
                "filters": [
                    {
                        "paramName": "kepid",
                        "values": [{"min": int(target_name), "max": int(target_name)}]
                    }
                ]
            }
        }
        
        result = await self._make_mast_request(query)
        
        if result and result.get('data'):
            kic_data = result['data'][0]
            return self._format_kic_data(kic_data)
        else:
            raise ValueError(f"KIC {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def _search_epic_target(self, target_name: str) -> Dict:
        """–ü–æ–∏—Å–∫ –≤ EPIC –∫–∞—Ç–∞–ª–æ–≥–µ"""
        
        query = {
            "service": "Mast.Catalogs.Filtered.K2targets",
            "format": "json",
            "params": {
                "columns": "epic_number,ra,dec,kepmag,kp_teff,kp_logg,kp_feh,kp_radius,kp_mass",
                "filters": [
                    {
                        "paramName": "epic_number",
                        "values": [{"min": int(target_name), "max": int(target_name)}]
                    }
                ]
            }
        }
        
        result = await self._make_mast_request(query)
        
        if result and result.get('data'):
            epic_data = result['data'][0]
            return self._format_epic_data(epic_data)
        else:
            raise ValueError(f"EPIC {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def _get_tess_lightcurve(self, target_name: str, sector: Optional[int] = None) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ TESS –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
        
        # –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö TESS
        query = {
            "service": "Mast.Caom.Filtered",
            "format": "json",
            "params": {
                "columns": "obsID,obs_id,target_name,t_min,t_max,em_min,em_max,dataproduct_type,calib_level,obs_collection,instrument_name,project,filters,productFilename",
                "filters": [
                    {
                        "paramName": "obs_collection",
                        "values": ["TESS"]
                    },
                    {
                        "paramName": "target_name",
                        "values": [f"TIC {target_name}"]
                    },
                    {
                        "paramName": "dataproduct_type",
                        "values": ["timeseries"]
                    }
                ]
            }
        }
        
        if sector:
            query["params"]["filters"].append({
                "paramName": "sequence_number",
                "values": [sector]
            })
        
        result = await self._make_mast_request(query)
        
        if result and result.get('data'):
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª
            observation = result['data'][0]
            return await self._download_tess_data(observation)
        else:
            raise ValueError(f"TESS –¥–∞–Ω–Ω—ã–µ –¥–ª—è TIC {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    async def _get_kepler_lightcurve(self, target_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Kepler –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
        
        query = {
            "service": "Mast.Caom.Filtered",
            "format": "json",
            "params": {
                "columns": "obsID,obs_id,target_name,t_min,t_max,dataproduct_type,calib_level,obs_collection,instrument_name,productFilename",
                "filters": [
                    {
                        "paramName": "obs_collection",
                        "values": ["Kepler"]
                    },
                    {
                        "paramName": "target_name",
                        "values": [f"KIC {target_name}"]
                    },
                    {
                        "paramName": "dataproduct_type",
                        "values": ["timeseries"]
                    }
                ]
            }
        }
        
        result = await self._make_mast_request(query)
        
        if result and result.get('data'):
            observation = result['data'][0]
            return await self._download_kepler_data(observation)
        else:
            raise ValueError(f"Kepler –¥–∞–Ω–Ω—ã–µ –¥–ª—è KIC {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    async def _get_k2_lightcurve(self, target_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ K2 –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
        
        query = {
            "service": "Mast.Caom.Filtered",
            "format": "json",
            "params": {
                "columns": "obsID,obs_id,target_name,t_min,t_max,dataproduct_type,calib_level,obs_collection,instrument_name,productFilename",
                "filters": [
                    {
                        "paramName": "obs_collection",
                        "values": ["K2"]
                    },
                    {
                        "paramName": "target_name",
                        "values": [f"EPIC {target_name}"]
                    },
                    {
                        "paramName": "dataproduct_type",
                        "values": ["timeseries"]
                    }
                ]
            }
        }
        
        result = await self._make_mast_request(query)
        
        if result and result.get('data'):
            observation = result['data'][0]
            return await self._download_k2_data(observation)
        else:
            raise ValueError(f"K2 –¥–∞–Ω–Ω—ã–µ –¥–ª—è EPIC {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    async def _make_mast_request(self, query: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ MAST API"""
        
        await self._rate_limit()
        
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'ExoplanetAI/1.0'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.MAST_BASE_URL}/invoke",
                json=query,
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"MAST API –æ—à–∏–±–∫–∞: {response.status}")
                    raise aiohttp.ClientError(f"MAST API returned {response.status}")
    
    async def _download_tess_data(self, observation: Dict) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ TESS –¥–∞–Ω–Ω—ã—Ö"""
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ FITS —Ñ–∞–π–ª–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
        logger.info(f"–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ TESS –¥–∞–Ω–Ω—ã—Ö: {observation.get('productFilename', 'unknown')}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        t_min = observation.get('t_min', 2458000)  # TESS BJD
        t_max = observation.get('t_max', t_min + 27)  # ~27 –¥–Ω–µ–π —Å–µ–∫—Ç–æ—Ä
        
        n_points = 13000  # ~2-–º–∏–Ω—É—Ç–Ω–∞—è –∫–∞–¥–µ–Ω—Ü–∏—è
        time = np.linspace(t_min, t_max, n_points)
        
        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —à—É–º–æ–º
        flux = np.ones(n_points)
        flux += np.random.normal(0, 100e-6, n_points)  # 100 ppm —à—É–º
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        rotation_period = np.random.uniform(10, 30)
        flux += 0.001 * np.sin(2 * np.pi * time / rotation_period)
        
        flux_err = np.full(n_points, 100e-6)
        
        return {
            "time": time.tolist(),
            "flux": flux.tolist(),
            "flux_err": flux_err.tolist(),
            "mission": "TESS",
            "target_name": observation.get('target_name', 'Unknown'),
            "sector": observation.get('sequence_number', 1),
            "cadence_minutes": 2,
            "data_source": "NASA MAST (simulated)",
            "observation_id": observation.get('obsID', 'unknown')
        }
    
    async def _download_kepler_data(self, observation: Dict) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ Kepler –¥–∞–Ω–Ω—ã—Ö"""
        
        logger.info(f"–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Kepler –¥–∞–Ω–Ω—ã—Ö: {observation.get('productFilename', 'unknown')}")
        
        t_min = observation.get('t_min', 120)  # Kepler BJD - 2454833
        t_max = observation.get('t_max', t_min + 90)  # ~90 –¥–Ω–µ–π –∫–≤–∞—Ä—Ç–∞–ª
        
        n_points = 4320  # 30-–º–∏–Ω—É—Ç–Ω–∞—è –∫–∞–¥–µ–Ω—Ü–∏—è
        time = np.linspace(t_min, t_max, n_points)
        
        flux = np.ones(n_points)
        flux += np.random.normal(0, 50e-6, n_points)  # 50 ppm —à—É–º
        
        # –ó–≤–µ–∑–¥–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        rotation_period = np.random.uniform(15, 35)
        flux += 0.0005 * np.sin(2 * np.pi * time / rotation_period)
        
        flux_err = np.full(n_points, 50e-6)
        
        return {
            "time": time.tolist(),
            "flux": flux.tolist(),
            "flux_err": flux_err.tolist(),
            "mission": "Kepler",
            "target_name": observation.get('target_name', 'Unknown'),
            "quarter": observation.get('sequence_number', 1),
            "cadence_minutes": 30,
            "data_source": "NASA MAST (simulated)",
            "observation_id": observation.get('obsID', 'unknown')
        }
    
    async def _download_k2_data(self, observation: Dict) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ K2 –¥–∞–Ω–Ω—ã—Ö"""
        
        logger.info(f"–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ K2 –¥–∞–Ω–Ω—ã—Ö: {observation.get('productFilename', 'unknown')}")
        
        t_min = observation.get('t_min', 2000)  # K2 BJD - 2454833
        t_max = observation.get('t_max', t_min + 80)  # ~80 –¥–Ω–µ–π –∫–∞–º–ø–∞–Ω–∏—è
        
        n_points = 3840  # 30-–º–∏–Ω—É—Ç–Ω–∞—è –∫–∞–¥–µ–Ω—Ü–∏—è
        time = np.linspace(t_min, t_max, n_points)
        
        flux = np.ones(n_points)
        flux += np.random.normal(0, 80e-6, n_points)  # 80 ppm —à—É–º
        
        # K2 –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        flux += 0.002 * np.sin(2 * np.pi * time / 6.0)  # –¢–µ–ø–ª–æ–≤—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        
        flux_err = np.full(n_points, 80e-6)
        
        return {
            "time": time.tolist(),
            "flux": flux.tolist(),
            "flux_err": flux_err.tolist(),
            "mission": "K2",
            "target_name": observation.get('target_name', 'Unknown'),
            "campaign": observation.get('sequence_number', 1),
            "cadence_minutes": 30,
            "data_source": "NASA MAST (simulated)",
            "observation_id": observation.get('obsID', 'unknown')
        }
    
    def _format_tic_data(self, data: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TIC –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "target_id": str(data.get('ID', 'unknown')),
            "catalog": "TIC",
            "ra": float(data.get('ra', 0)),
            "dec": float(data.get('dec', 0)),
            "magnitude": float(data.get('Tmag', 0)),
            "temperature": float(data.get('Teff', 5778)),
            "radius": float(data.get('rad', 1.0)),
            "mass": float(data.get('mass', 1.0)),
            "distance": float(data.get('d', 100)),
            "data_source": "NASA MAST TIC"
        }
    
    def _format_kic_data(self, data: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KIC –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "target_id": str(data.get('kepid', 'unknown')),
            "catalog": "KIC",
            "ra": float(data.get('ra', 0)),
            "dec": float(data.get('dec', 0)),
            "magnitude": float(data.get('kepmag', 0)),
            "temperature": float(data.get('kp_teff', 5778)),
            "radius": float(data.get('kp_radius', 1.0)),
            "mass": float(data.get('kp_mass', 1.0)),
            "metallicity": float(data.get('kp_feh', 0.0)),
            "data_source": "NASA MAST KIC"
        }
    
    def _format_epic_data(self, data: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EPIC –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "target_id": str(data.get('epic_number', 'unknown')),
            "catalog": "EPIC",
            "ra": float(data.get('ra', 0)),
            "dec": float(data.get('dec', 0)),
            "magnitude": float(data.get('kepmag', 0)),
            "temperature": float(data.get('kp_teff', 5778)),
            "radius": float(data.get('kp_radius', 1.0)),
            "mass": float(data.get('kp_mass', 1.0)),
            "metallicity": float(data.get('kp_feh', 0.0)),
            "data_source": "NASA MAST EPIC"
        }
    
    def _process_planet_data(self, data: List[Dict]) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö"""
        planets = []
        
        for planet in data:
            if planet.get('pl_name'):
                planets.append({
                    "name": planet['pl_name'],
                    "period": float(planet.get('pl_orbper', 0)) if planet.get('pl_orbper') else None,
                    "epoch": float(planet.get('pl_tranmid', 0)) if planet.get('pl_tranmid') else None,
                    "duration": float(planet.get('pl_trandur', 0)) if planet.get('pl_trandur') else None,
                    "depth": float(planet.get('pl_trandep', 0)) if planet.get('pl_trandep') else None,
                    "radius": float(planet.get('pl_rade', 0)) if planet.get('pl_rade') else None,
                    "mass": float(planet.get('pl_masse', 0)) if planet.get('pl_masse') else None,
                    "confirmed": True,
                    "data_source": "NASA Exoplanet Archive"
                })
        
        return planets
    
    async def _rate_limit(self):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        if time_since_last < self.request_delay:
            await asyncio.sleep(self.request_delay - time_since_last)
        
        self.last_request_time = time.time()
    
    def _check_cache(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞"""
        if key in self.data_cache:
            cache_time = self.data_cache[key]['timestamp']
            if time.time() - cache_time < self.cache_timeout:
                return True
            else:
                del self.data_cache[key]
        return False
    
    def _save_to_cache(self, key: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à"""
        self.data_cache[key] = {
            'data': data,
            'timestamp': time.time()
        }
    
    def _get_fallback_target_info(self, target_name: str, catalog: str) -> Dict:
        """Fallback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏"""
        return {
            "target_id": target_name,
            "catalog": catalog,
            "ra": 0.0,
            "dec": 0.0,
            "magnitude": 12.0,
            "temperature": 5778.0,
            "radius": 1.0,
            "mass": 1.0,
            "data_source": "Fallback (NASA API unavailable)",
            "note": "Real NASA data temporarily unavailable"
        }
    
    def _get_fallback_lightcurve(self, target_name: str, mission: str) -> Dict:
        """Fallback –∫—Ä–∏–≤–∞—è –±–ª–µ—Å–∫–∞"""
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∏—Å—Å–∏–π
        mission_params = {
            "TESS": {"duration": 27, "cadence": 2, "n_points": 13000, "noise": 100e-6},
            "Kepler": {"duration": 90, "cadence": 30, "n_points": 4320, "noise": 50e-6},
            "K2": {"duration": 80, "cadence": 30, "n_points": 3840, "noise": 80e-6}
        }
        
        params = mission_params.get(mission, mission_params["TESS"])
        
        time = np.linspace(0, params["duration"], params["n_points"])
        flux = np.ones(params["n_points"]) + np.random.normal(0, params["noise"], params["n_points"])
        flux_err = np.full(params["n_points"], params["noise"])
        
        return {
            "time": time.tolist(),
            "flux": flux.tolist(),
            "flux_err": flux_err.tolist(),
            "mission": mission,
            "target_name": target_name,
            "cadence_minutes": params["cadence"],
            "data_source": "Fallback (NASA API unavailable)",
            "note": "Simulated data - real NASA data temporarily unavailable"
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
nasa_browser = NASADataBrowser()
