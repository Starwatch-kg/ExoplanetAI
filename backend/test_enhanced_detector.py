"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
"""

import asyncio
import numpy as np
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_enhanced_detector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        from enhanced_transit_detector import enhanced_detector
        from production_data_service import production_data_service
        from nasa_data_browser import nasa_browser
        
        logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("\n" + "="*50)
        logger.info("–¢–ï–°–¢ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        logger.info("="*50)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –∫—Ä–∏–≤—É—é –±–ª–µ—Å–∫–∞ —Å —Ç—Ä–∞–Ω–∑–∏—Ç–æ–º
        time_span = 27.0  # –¥–Ω–∏
        n_points = 1000
        time = np.linspace(0, time_span, n_points)
        
        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ç–æ–∫
        flux = np.ones(n_points)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        noise_level = 100e-6  # 100 ppm
        flux += np.random.normal(0, noise_level, n_points)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω–∑–∏—Ç
        period = 10.0  # –¥–Ω–∏
        depth = 0.001  # 0.1%
        duration = 0.1  # –¥–Ω–∏
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
        transit_times = np.arange(5.0, time_span, period)
        
        for t_transit in transit_times:
            mask = np.abs(time - t_transit) < duration/2
            flux[mask] -= depth
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è –±–ª–µ—Å–∫–∞:")
        logger.info(f"   - –ü–µ—Ä–∏–æ–¥: {period} –¥–Ω–µ–π")
        logger.info(f"   - –ì–ª—É–±–∏–Ω–∞: {depth*1e6:.0f} ppm")
        logger.info(f"   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration*24:.1f} —á–∞—Å–æ–≤")
        logger.info(f"   - –®—É–º: {noise_level*1e6:.0f} ppm")
        
        # –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤—ã–π BLS –∞–Ω–∞–ª–∏–∑
        logger.info("\n" + "="*50)
        logger.info("–¢–ï–°–¢ 2: –ë–∞–∑–æ–≤—ã–π BLS –∞–Ω–∞–ª–∏–∑")
        logger.info("="*50)
        
        start_time = datetime.now()
        
        basic_results = production_data_service.detect_transits_bls(
            time, flux,
            period_min=5.0, period_max=15.0,
            duration_min=0.05, duration_max=0.2,
            snr_threshold=7.0,
            use_enhanced=False
        )
        
        basic_time = (datetime.now() - start_time).total_seconds()
        
        logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–π BLS –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {basic_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"   - –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {basic_results['best_period']:.3f} –¥–Ω–µ–π")
        logger.info(f"   - SNR: {basic_results['snr']:.1f}")
        logger.info(f"   - –ó–Ω–∞—á–∏–º–æ—Å—Ç—å: {basic_results['significance']:.4f}")
        
        # –¢–µ—Å—Ç 3: –£—Å–∏–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        logger.info("\n" + "="*50)
        logger.info("–¢–ï–°–¢ 3: –£—Å–∏–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        logger.info("="*50)
        
        start_time = datetime.now()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–µ–∑–¥–µ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        star_info = {
            'temperature': 5778,
            'radius': 1.0,
            'mass': 1.0,
            'stellar_type': 'G2V'
        }
        
        enhanced_results = enhanced_detector.detect_transits_enhanced(
            time, flux, star_info,
            period_min=5.0, period_max=15.0,
            duration_min=0.05, duration_max=0.2,
            snr_threshold=7.0
        )
        
        enhanced_time = (datetime.now() - start_time).total_seconds()
        
        logger.info(f"‚úÖ –£—Å–∏–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {enhanced_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if enhanced_results['candidates']:
            candidate = enhanced_results['candidates'][0]
            logger.info(f"üéâ –ù–ê–ô–î–ï–ù –ö–ê–ù–î–ò–î–ê–¢:")
            logger.info(f"   - –ü–µ—Ä–∏–æ–¥: {candidate['period']:.3f} –¥–Ω–µ–π (–∏—Å—Ç–∏–Ω–Ω—ã–π: {period})")
            logger.info(f"   - –ì–ª—É–±–∏–Ω–∞: {candidate['depth']*1e6:.0f} ppm (–∏—Å—Ç–∏–Ω–Ω–∞—è: {depth*1e6:.0f})")
            logger.info(f"   - SNR: {candidate['snr']:.1f}")
            logger.info(f"   - ML —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {candidate.get('ml_confidence', 0):.3f}")
            logger.info(f"   - –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {candidate.get('is_physically_plausible', 'N/A')}")
            
            # –¢–æ—á–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            period_error = abs(candidate['period'] - period) / period * 100
            depth_error = abs(candidate['depth'] - depth) / depth * 100
            
            logger.info(f"üìä –¢–û–ß–ù–û–°–¢–¨ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:")
            logger.info(f"   - –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∞: {period_error:.1f}%")
            logger.info(f"   - –û—à–∏–±–∫–∞ –≥–ª—É–±–∏–Ω—ã: {depth_error:.1f}%")
        else:
            logger.warning("‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç 4: NASA Data Browser
        logger.info("\n" + "="*50)
        logger.info("–¢–ï–°–¢ 4: NASA Data Browser")
        logger.info("="*50)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∑–≤–µ–∑–¥—ã
            test_target = "441420236"  # TOI-715
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TIC {test_target}")
            
            star_data = await nasa_browser.search_target(test_target, "TIC")
            logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–µ–∑–¥–µ –ø–æ–ª—É—á–µ–Ω–∞:")
            logger.info(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {star_data.get('data_source', 'Unknown')}")
            logger.info(f"   - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {star_data.get('temperature', 'N/A')} K")
            logger.info(f"   - –†–∞–¥–∏—É—Å: {star_data.get('radius', 'N/A')} R‚òâ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞ TESS")
            lightcurve_data = await nasa_browser.get_lightcurve_data(test_target, "TESS")
            
            if lightcurve_data:
                logger.info(f"‚úÖ –ö—Ä–∏–≤–∞—è –±–ª–µ—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
                logger.info(f"   - –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(lightcurve_data.get('time', []))}")
                logger.info(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {lightcurve_data.get('data_source', 'Unknown')}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
            logger.info(f"ü™ê –ü–æ–∏—Å–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç")
            confirmed_planets = await nasa_browser.get_confirmed_planets(test_target)
            
            if confirmed_planets:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(confirmed_planets)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç")
                for i, planet in enumerate(confirmed_planets[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    logger.info(f"   {i+1}. {planet.get('name', 'Unknown')}")
                    if planet.get('period'):
                        logger.info(f"      –ü–µ—Ä–∏–æ–¥: {planet['period']:.2f} –¥–Ω–µ–π")
            else:
                logger.info("‚ÑπÔ∏è  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  NASA Data Browser —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        
        # –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        logger.info("\n" + "="*50)
        logger.info("–¢–ï–°–¢ 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç")
        logger.info("="*50)
        
        try:
            # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
            full_results = production_data_service.detect_transits_bls(
                time, flux,
                period_min=5.0, period_max=15.0,
                duration_min=0.05, duration_max=0.2,
                snr_threshold=7.0,
                use_enhanced=True,
                star_info=star_info
            )
            
            logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            logger.info(f"   - –£—Å–∏–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {full_results.get('enhanced_analysis', False)}")
            logger.info(f"   - ML –∞–Ω–∞–ª–∏–∑: {full_results.get('ml_confidence', 0) > 0}")
            logger.info(f"   - –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {full_results.get('physical_validation', False)}")
            
        except Exception as e:
            logger.error(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "="*50)
        logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("="*50)
        
        logger.info("‚úÖ –£–°–ü–ï–®–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û:")
        logger.info("   ‚úì –£—Å–∏–ª–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤")
        logger.info("   ‚úì –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        logger.info("   ‚úì –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–∞ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞")
        logger.info("   ‚úì ML –∞–Ω–∞–ª–∏–∑ —Å –∞–Ω—Å–∞–º–±–ª–µ–º –º–æ–¥–µ–ª–µ–π")
        logger.info("   ‚úì –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        logger.info("   ‚úì NASA Data Browser –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("   ‚úì –ö—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–ª–∞–Ω–µ—Ç–∞–º–∏")
        
        logger.info(f"\nüéØ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        logger.info(f"   - –ë–∞–∑–æ–≤—ã–π BLS: {basic_time:.2f} —Å–µ–∫")
        logger.info(f"   - –£—Å–∏–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {enhanced_time:.2f} —Å–µ–∫")
        logger.info(f"   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {basic_time/enhanced_time:.1f}x" if enhanced_time > 0 else "   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ: N/A")
        
        logger.info("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        logger.error("pip install torch scikit-learn scipy numpy aiohttp")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_enhanced_detector())
