#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ ExoplanetAI
Simple Data Management System Demo for ExoplanetAI
"""

import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, Any

from rich.console import Console
from rich.table import Table
from rich.panel import Panel

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
from ingest.data_manager import DataManager
from ingest.storage import StorageManager
from ingest.validator import DataValidator
from ingest.versioning import VersionManager
from preprocessing.lightcurve_processor import LightCurveProcessor
from core.config import get_settings

console = Console()
logger = logging.getLogger(__name__)

class SimpleDataDemo:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self):
        self.settings = get_settings()
        
    async def test_configuration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        console.print("üîß [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...[/bold blue]")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            config_table = Table(title="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö")
            config_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
            config_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
            
            config_table.add_row("–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–∞–Ω–Ω—ã—Ö", str(self.settings.data.data_path))
            config_table.add_row("–ü—É—Ç—å —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö", str(self.settings.data.raw_data_path))
            config_table.add_row("–ü—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", str(self.settings.data.processed_data_path))
            config_table.add_row("–ü—É—Ç—å –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞", str(self.settings.data.lightcurves_path))
            config_table.add_row("–í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", str(self.settings.data.enable_versioning))
            config_table.add_row("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", f"{self.settings.data.max_storage_gb} GB")
            
            console.print(config_table)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            paths_to_check = [
                self.settings.data.data_path,
                self.settings.data.raw_data_path,
                self.settings.data.processed_data_path,
                self.settings.data.lightcurves_path,
            ]
            
            paths_table = Table(title="–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
            paths_table.add_column("–ü—É—Ç—å", style="cyan")
            paths_table.add_column("–°—É—â–µ—Å—Ç–≤—É–µ—Ç", style="green")
            paths_table.add_column("–†–∞–∑–º–µ—Ä", style="yellow")
            
            for path_str in paths_to_check:
                path = Path(path_str)
                exists = "‚úÖ" if path.exists() else "‚ùå"
                
                if path.exists():
                    try:
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        total_size = sum(f.stat().st_size for f in path.rglob('*') if f.is_file())
                        size_str = f"{total_size / 1024 / 1024:.2f} MB"
                    except:
                        size_str = "N/A"
                else:
                    size_str = "N/A"
                
                paths_table.add_row(str(path), exists, size_str)
            
            console.print(paths_table)
            
            return True
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/bold red]")
            return False
    
    async def test_storage_manager(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StorageManager"""
        console.print("\nüíæ [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StorageManager...[/bold blue]")
        
        try:
            storage = StorageManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            init_result = await storage.initialize()
            console.print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if init_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = {
                "test_key": "test_value",
                "timestamp": "2024-01-01T00:00:00Z",
                "data": [1, 2, 3, 4, 5]
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_file = "test_storage.json"
            save_result = await storage.save_metadata(test_file, test_data)
            console.print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if save_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            loaded_data = await storage.load_metadata(test_file)
            if loaded_data and loaded_data.get("test_key") == "test_value":
                console.print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                console.print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ‚ùå –û—à–∏–±–∫–∞")
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await storage.get_storage_stats()
            if stats:
                stats_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
                stats_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
                stats_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
                
                stats_table.add_row("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{stats.get('total_size_mb', 0):.2f} MB")
                stats_table.add_row("–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤", str(stats.get('total_files', 0)))
                stats_table.add_row("–í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", str(stats.get('total_directories', 0)))
                
                console.print(stats_table)
            
            await storage.cleanup()
            return True
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ StorageManager: {e}[/bold red]")
            return False
    
    async def test_validator(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataValidator"""
        console.print("\nüîç [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataValidator...[/bold blue]")
        
        try:
            validator = DataValidator()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏
            test_planet_data = {
                "pl_name": ["Valid Planet", "Invalid Planet"],
                "pl_orbper": [365.25, -10.0],  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –æ—à–∏–±–∫–∞
                "pl_rade": [1.0, 1000.0],      # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                "ra": [180.0, 400.0],          # RA –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - –æ—à–∏–±–∫–∞
                "dec": [45.0, 95.0]            # DEC –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - –æ—à–∏–±–∫–∞
            }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            validation_result = await validator.validate_planet_data(test_planet_data)
            
            validation_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            validation_table.add_column("–¢–∏–ø", style="cyan")
            validation_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="yellow")
            validation_table.add_column("–ü—Ä–∏–º–µ—Ä—ã", style="white")
            
            errors = validation_result.get("errors", [])
            warnings = validation_result.get("warnings", [])
            
            validation_table.add_row(
                "–û—à–∏–±–∫–∏", 
                str(len(errors)),
                "; ".join(errors[:2]) if errors else "–ù–µ—Ç"
            )
            validation_table.add_row(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", 
                str(len(warnings)),
                "; ".join(warnings[:2]) if warnings else "–ù–µ—Ç"
            )
            validation_table.add_row(
                "–í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏", 
                str(validation_result.get("valid_records", 0)),
                f"–∏–∑ {validation_result.get('total_records', 0)} –æ–±—â–∏—Ö"
            )
            
            console.print(validation_table)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞—à–µ–ª –æ—à–∏–±–∫–∏
            if len(errors) > 0:
                console.print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫–∏")
                return True
            else:
                console.print("‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫–∏ –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return False
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ DataValidator: {e}[/bold red]")
            return False
    
    async def test_version_manager(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VersionManager"""
        console.print("\nüìù [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VersionManager...[/bold blue]")
        
        try:
            version_manager = VersionManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            init_result = await version_manager.initialize()
            console.print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if init_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
            version_name = "demo_test_v1.0"
            version_data = {
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
                "created_by": "simple_demo",
                "include_patterns": ["*.json", "*.csv"],
                "metadata": {
                    "purpose": "testing",
                    "components": ["storage", "validator"]
                }
            }
            
            create_result = await version_manager.create_version(version_name, version_data)
            if create_result.get("success"):
                console.print(f"‚úÖ –í–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {version_name}")
                console.print(f"üîó Commit: {create_result.get('commit_hash', 'N/A')[:8]}...")
            else:
                console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {create_result.get('error', 'Unknown')}")
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π
            versions = await version_manager.list_versions()
            if versions:
                versions_table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏")
                versions_table.add_column("–í–µ—Ä—Å–∏—è", style="cyan")
                versions_table.add_column("–î–∞—Ç–∞", style="yellow")
                versions_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
                
                for version in versions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    versions_table.add_row(
                        version.get("name", "N/A"),
                        version.get("created_at", "N/A")[:19] if version.get("created_at") else "N/A",
                        (version.get("description", "N/A")[:40] + "...") if len(version.get("description", "")) > 40 else version.get("description", "N/A")
                    )
                
                console.print(versions_table)
            
            return True
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ VersionManager: {e}[/bold red]")
            return False
    
    async def test_lightcurve_processor(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LightCurveProcessor"""
        console.print("\n‚öôÔ∏è [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LightCurveProcessor...[/bold blue]")
        
        try:
            processor = LightCurveProcessor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫—Ä–∏–≤—É—é –±–ª–µ—Å–∫–∞
            import numpy as np
            
            time_points = np.linspace(0, 10, 1000)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª + —à—É–º + –≤—ã–±—Ä–æ—Å—ã
            flux = 1.0 + 0.01 * np.sin(2 * np.pi * time_points) + 0.005 * np.random.normal(size=1000)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–±—Ä–æ—Å–æ–≤
            flux[100] = 1.1  # –í—ã–±—Ä–æ—Å
            flux[500] = 0.8  # –í—ã–±—Ä–æ—Å
            flux_err = np.full_like(flux, 0.005)
            
            test_lightcurve = {
                "time": time_points.tolist(),
                "flux": flux.tolist(),
                "flux_err": flux_err.tolist()
            }
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_params = {
                "remove_outliers": True,
                "sigma_clip_sigma": 3.0,
                "baseline_window_length": 51,
                "normalize_method": "median",
                "wavelet_denoising": False
            }
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            result = await processor.process_lightcurve(test_lightcurve, processing_params)
            
            if result.get("success"):
                stats = result.get("processing_stats", {})
                
                processing_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏")
                processing_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
                processing_table.add_column("–î–æ", style="yellow")
                processing_table.add_column("–ü–æ—Å–ª–µ", style="green")
                
                processing_table.add_row(
                    "–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö",
                    str(stats.get("original_points", 0)),
                    str(stats.get("processed_points", 0))
                )
                processing_table.add_row(
                    "–í—ã–±—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã",
                    "-",
                    str(stats.get("outliers_removed", 0))
                )
                processing_table.add_row(
                    "RMS —à—É–º–∞",
                    f"{stats.get('original_rms', 0):.6f}",
                    f"{stats.get('processed_rms', 0):.6f}"
                )
                
                console.print(processing_table)
                console.print(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.get('processing_time_ms', 0):.1f} –º—Å")
                
                return True
            else:
                console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', 'Unknown')}")
                return False
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ LightCurveProcessor: {e}[/bold red]")
            return False
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        console.print(Panel.fit(
            "[bold green]üåü –£–ü–†–û–©–ï–ù–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò üåü[/bold green]\n"
            "[yellow]Simple Data Management System Demo[/yellow]",
            border_style="green"
        ))
        
        tests = [
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_configuration),
            ("StorageManager", self.test_storage_manager),
            ("DataValidator", self.test_validator),
            ("VersionManager", self.test_version_manager),
            ("LightCurveProcessor", self.test_lightcurve_processor)
        ]
        
        results = {}
        
        for test_name, test_func in tests:
            try:
                result = await test_func()
                results[test_name] = result
            except Exception as e:
                console.print(f"‚ùå [bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}[/bold red]")
                results[test_name] = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.print("\n" + "="*60)
        console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢[/bold blue]")
        console.print("="*60)
        
        success_count = sum(1 for result in results.values() if result)
        total_count = len(results)
        
        result_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
        result_table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
        result_table.add_column("–†–µ–∑—É–ª—å—Ç–∞—Ç", style="white")
        
        for test_name, result in results.items():
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result else "‚ùå –û—à–∏–±–∫–∞"
            result_table.add_row(test_name, status)
        
        console.print(result_table)
        
        if success_count == total_count:
            console.print(f"\nüéâ [bold green]–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! ({success_count}/{total_count})[/bold green]")
            console.print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        else:
            console.print(f"\n‚ö†Ô∏è [bold yellow]–ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ[/bold yellow]")
        
        return success_count == total_count


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = SimpleDataDemo()
    success = await demo.run_demo()
    
    if success:
        console.print("\nüéØ [bold green]–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]")
        return 0
    else:
        console.print("\nüí• [bold red]–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏[/bold red]")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        exit(exit_code)
    except KeyboardInterrupt:
        console.print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        console.print(f"\nüí• [bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
        exit(1)
