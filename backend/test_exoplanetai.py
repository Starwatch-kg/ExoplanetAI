"""
–¢–µ—Å—Ç—ã –¥–ª—è ExoplanetAI —Å–∏—Å—Ç–µ–º—ã
"""
import pytest
import asyncio
from main import app
from fastapi.testclient import TestClient
import json

client = TestClient(app)

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json()["status"] == "healthy"

def test_root_endpoint():
    """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    response = client.get("/")
    assert response.status_code == 200
    assert "Exoplanet AI API" in response.json()["message"]

def test_nasa_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NASA"""
    response = client.get("/api/nasa/stats")
    assert response.status_code == 200
    data = response.json()
    assert "totalPlanets" in data
    assert "totalHosts" in data

def test_load_tic_real_data():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö TIC"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º TIC ID, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –ø–ª–∞–Ω–µ—Ç—É
    response = client.post("/load-tic",
                         json={"tic_id": "TIC 307210830"})
    assert response.status_code == 200
    data = response.json()
    assert data["success"] == True
    assert "data" in data

def test_load_tic_invalid():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º TIC ID"""
    response = client.post("/load-tic",
                         json={"tic_id": "INVALID"})
    # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    assert response.status_code == 500

def test_amateur_analysis():
    """–¢–µ—Å—Ç –ª—é–±–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    response = client.post("/amateur/analyze",
                         json={"tic_id": "TIC 307210830"})
    assert response.status_code == 200
    data = response.json()
    assert data["success"] == True

def test_pro_analysis():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_data = {
        "lightcurve_data": {
            "tic_id": "TIC 307210830",
            "times": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            "fluxes": [1.0, 0.99, 1.01, 0.98, 1.02, 1.0, 0.99, 1.01, 0.98, 1.0]
        },
        "model_type": "detector"
    }

    response = client.post("/pro/analyze", json=test_data)
    assert response.status_code == 200
    data = response.json()
    assert data["success"] == True
    assert "plots_data" in data
    assert "detailed_analysis" in data

def test_get_latest_analyses():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
    response = client.get("/api/latest-analyses")
    assert response.status_code == 200
    data = response.json()
    assert "success" in data

def test_analysis_with_synthetic_data_removed():
    """–¢–µ—Å—Ç —á—Ç–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç fallback —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    response = client.post("/load-tic",
                         json={"tic_id": "NONEXISTENT"})
    assert response.status_code == 500  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞, –Ω–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏–∫–∏

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ExoplanetAI...")

    test_health_check()
    print("‚úÖ Health check passed")

    test_root_endpoint()
    print("‚úÖ Root endpoint passed")

    test_nasa_stats()
    print("‚úÖ NASA stats passed")

    test_load_tic_real_data()
    print("‚úÖ Real TIC data loading passed")

    test_load_tic_invalid()
    print("‚úÖ Invalid TIC handling passed")

    test_amateur_analysis()
    print("‚úÖ Amateur analysis passed")

    test_pro_analysis()
    print("‚úÖ Pro analysis passed")

    test_get_latest_analyses()
    print("‚úÖ Latest analyses passed")

    test_analysis_with_synthetic_data_removed()
    print("‚úÖ Synthetic data removal verified")

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üìä ExoplanetAI –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ NASA")
