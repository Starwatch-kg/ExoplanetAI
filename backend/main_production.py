"""
ExoplanetAI Production Main - Unified FastAPI + React + WebSocket
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- Unified deployment: FastAPI —Ä–∞–∑–¥–∞–µ—Ç React build
- WebSocket –¥–ª—è real-time ML training progress
- JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å role-based access
- Comprehensive error handling –∏ logging
- Production-ready security –∏ performance
"""

import asyncio
import logging
import os
import time
from contextlib import asynccontextmanager
from pathlib import Path
from typing import Dict, List, Optional

import uvicorn
from fastapi import FastAPI, HTTPException, Request, Depends, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
import jwt
import redis.asyncio as redis
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from core.config import config
from core.logging import get_logger, configure_structlog
from core.cache import initialize_cache, cleanup_cache
from auth.jwt_auth import get_current_user, create_access_token, verify_token
from data_sources.registry import get_registry, initialize_default_sources

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
configure_structlog()
logger = get_logger(__name__)

# Security
security = HTTPBearer()

# WebSocket Connection Manager –¥–ª—è real-time updates
class ConnectionManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        self.user_sessions: Dict[str, List[str]] = {}
        
    async def connect(self, websocket: WebSocket, session_id: str, user_id: Optional[str] = None):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ WebSocket"""
        await websocket.accept()
        self.active_connections[session_id] = websocket
        
        if user_id:
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = []
            self.user_sessions[user_id].append(session_id)
            
        logger.info(f"WebSocket connected: {session_id}, user: {user_id}")
        
    def disconnect(self, session_id: str, user_id: Optional[str] = None):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket"""
        if session_id in self.active_connections:
            del self.active_connections[session_id]
            
        if user_id and user_id in self.user_sessions:
            self.user_sessions[user_id] = [
                s for s in self.user_sessions[user_id] if s != session_id
            ]
            if not self.user_sessions[user_id]:
                del self.user_sessions[user_id]
                
        logger.info(f"WebSocket disconnected: {session_id}")
        
    async def send_personal_message(self, message: dict, session_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        if session_id in self.active_connections:
            try:
                await self.active_connections[session_id].send_json(message)
            except Exception as e:
                logger.error(f"Failed to send message to {session_id}: {e}")
                
    async def send_to_user(self, message: dict, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_sessions:
            for session_id in self.user_sessions[user_id]:
                await self.send_personal_message(message, session_id)
                
    async def broadcast(self, message: dict):
        """Broadcast —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        disconnected = []
        for session_id, websocket in self.active_connections.items():
            try:
                await websocket.send_json(message)
            except Exception:
                disconnected.append(session_id)
                
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for session_id in disconnected:
            self.disconnect(session_id)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
manager = ConnectionManager()

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class PredictionRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç—ã"""
    target_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TOI-715)")
    data_source: str = Field(default="TESS", description="–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
    analysis_type: str = Field(default="BLS", description="–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞")
    model_type: str = Field(default="ensemble", description="–¢–∏–ø ML –º–æ–¥–µ–ª–∏")
    
class PredictionResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    target_name: str
    prediction: str
    confidence: float
    probability_planet: float
    bls_results: Dict
    processing_time: float
    model_version: str
    
class TrainingRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    model_type: str = Field(..., description="–¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    dataset_path: str = Field(..., description="–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É")
    epochs: int = Field(default=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö")
    batch_size: int = Field(default=32, description="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    
class TrainingProgress(BaseModel):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    job_id: str
    epoch: int
    total_epochs: int
    loss: float
    accuracy: float
    val_loss: Optional[float] = None
    val_accuracy: Optional[float] = None
    eta_seconds: int
    status: str

# Lifespan manager –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ Starting ExoplanetAI Production Server...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
        await initialize_cache()
        logger.info("‚úÖ Cache initialized")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        registry = get_registry()
        await initialize_default_sources(registry)
        logger.info("‚úÖ Data sources initialized")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
        await initialize_ml_models()
        logger.info("‚úÖ ML models loaded")
        
        logger.info("üéâ ExoplanetAI Production Server started successfully!")
        
        yield
        
    finally:
        # Cleanup –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        logger.info("üîÑ Shutting down ExoplanetAI...")
        await cleanup_cache()
        logger.info("‚úÖ Cleanup completed")

async def initialize_ml_models():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π"""
    # –ó–¥–µ—Å—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤
    logger.info("Loading ML models...")
    await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    
def create_app() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    app = FastAPI(
        title="ExoplanetAI Production API",
        description="Advanced Exoplanet Detection and Analysis Platform",
        version="2.0.0",
        docs_url="/api/docs",
        redoc_url="/api/redoc",
        openapi_url="/api/openapi.json",
        lifespan=lifespan,
    )
    
    # Middleware –¥–ª—è —Å–∂–∞—Ç–∏—è
    app.add_middleware(GZipMiddleware, minimum_size=1000)
    
    # CORS middleware –¥–ª—è development
    if config.environment == "development":
        app.add_middleware(
            CORSMiddleware,
            allow_origins=config.security.allowed_origins,
            allow_credentials=True,
            allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            allow_headers=["*"],
        )
    
    # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    @app.middleware("http")
    async def log_requests(request: Request, call_next):
        start_time = time.time()
        response = await call_next(request)
        process_time = time.time() - start_time
        
        logger.info(
            f"{request.method} {request.url.path}",
            status_code=response.status_code,
            process_time=f"{process_time:.3f}s"
        )
        return response
    
    # Health check endpoint
    @app.get("/health")
    async def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "version": "2.0.0",
            "components": {
                "cache": "healthy",
                "database": "healthy",
                "ml_models": "healthy"
            }
        }
    
    # API Routes
    
    @app.post("/api/predict", response_model=PredictionResponse)
    async def predict_exoplanet(
        request: PredictionRequest,
        current_user = Depends(get_current_user)
    ):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML –º–æ–¥–µ–ª–µ–π
        
        –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç:
        1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–ª–∏ –∏–∑ NASA/TESS
        2. –í—ã–ø–æ–ª–Ω—è–µ—Ç BLS –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
        3. –ü—Ä–∏–º–µ–Ω—è–µ—Ç ML –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—Ä–æ–≤–Ω–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        start_time = time.time()
        
        try:
            logger.info(f"Starting prediction for {request.target_name}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –∏–∑ lightkurve/MAST)
            await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
            # –ò–º–∏—Ç–∞—Ü–∏—è BLS –∞–Ω–∞–ª–∏–∑–∞
            bls_results = {
                "period": 2.34567,
                "epoch": 1234.5678,
                "depth": 0.001234,
                "duration": 0.123,
                "snr": 12.34,
                "significance": 0.95
            }
            
            # –ò–º–∏—Ç–∞—Ü–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            await asyncio.sleep(0.3)  # –ò–º–∏—Ç–∞—Ü–∏—è inference
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            prediction = "Planet Candidate" if bls_results["snr"] > 10 else "No Planet"
            confidence = min(bls_results["snr"] / 20.0, 1.0)
            probability_planet = confidence if prediction == "Planet Candidate" else 1 - confidence
            
            processing_time = time.time() - start_time
            
            result = PredictionResponse(
                target_name=request.target_name,
                prediction=prediction,
                confidence=confidence,
                probability_planet=probability_planet,
                bls_results=bls_results,
                processing_time=processing_time,
                model_version="v2.0.0"
            )
            
            logger.info(f"Prediction completed for {request.target_name}: {prediction}")
            return result
            
        except Exception as e:
            logger.error(f"Prediction failed for {request.target_name}: {e}")
            raise HTTPException(status_code=500, detail=f"Prediction failed: {str(e)}")
    
    @app.post("/api/train")
    async def start_training(
        request: TrainingRequest,
        current_user = Depends(get_current_user)
    ):
        """
        –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏ —Å real-time –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —á–µ—Ä–µ–∑ WebSocket
        
        –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç:
        1. –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ WebSocket
        4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if current_user.role not in ["researcher", "admin"]:
            raise HTTPException(status_code=403, detail="Insufficient permissions for training")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è job_id
        job_id = f"train_{int(time.time())}_{current_user.id}"
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        asyncio.create_task(run_training(job_id, request, current_user.id))
        
        return {
            "job_id": job_id,
            "status": "started",
            "message": "Training started. Connect to WebSocket for progress updates.",
            "websocket_url": f"/ws/training/{job_id}"
        }
    
    # WebSocket endpoints
    
    @app.websocket("/ws/training/{job_id}")
    async def training_websocket(websocket: WebSocket, job_id: str):
        """
        WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        
        –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —ç—Ç–æ–º—É endpoint'—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:
        - –ü—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è (—ç–ø–æ—Ö–∏, loss, accuracy)
        - –°—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        - –û—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        """
        session_id = f"training_{job_id}"
        await manager.connect(websocket, session_id)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            await manager.send_personal_message({
                "type": "training_started",
                "job_id": job_id,
                "message": "Training session connected"
            }, session_id)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            while True:
                try:
                    data = await websocket.receive_text()
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (pause, stop, etc.)
                    logger.info(f"Received WebSocket message: {data}")
                except WebSocketDisconnect:
                    break
                    
        except Exception as e:
            logger.error(f"WebSocket error: {e}")
        finally:
            manager.disconnect(session_id)
    
    @app.websocket("/ws/connect/{session_id}")
    async def general_websocket(websocket: WebSocket, session_id: str):
        """
        –û–±—â–∏–π WebSocket endpoint –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        await manager.connect(websocket, session_id)
        
        try:
            await manager.send_personal_message({
                "type": "connected",
                "session_id": session_id,
                "timestamp": datetime.utcnow().isoformat()
            }, session_id)
            
            while True:
                try:
                    data = await websocket.receive_text()
                    # Echo –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await manager.send_personal_message({
                        "type": "echo",
                        "data": data,
                        "timestamp": datetime.utcnow().isoformat()
                    }, session_id)
                except WebSocketDisconnect:
                    break
                    
        except Exception as e:
            logger.error(f"WebSocket error: {e}")
        finally:
            manager.disconnect(session_id)
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ React frontend
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ React build
    frontend_dist = Path(__file__).parent.parent / "frontend" / "dist"
    
    if frontend_dist.exists():
        logger.info(f"‚úÖ Serving React frontend from {frontend_dist}")
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å—Å–µ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        app.mount(
            "/assets", 
            StaticFiles(directory=frontend_dist / "assets"), 
            name="assets"
        )
        
        # Favicon –∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        @app.get("/favicon.ico")
        async def favicon():
            return FileResponse(frontend_dist / "favicon.ico")
        
        # React Router - –≤—Å–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–¥–∞–µ–º React
        @app.get("/{path:path}")
        async def serve_react(path: str):
            """
            –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π
            –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç React Router —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            """
            # API –ø—É—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å —Å—é–¥–∞
            if path.startswith("api/") or path.startswith("ws/"):
                raise HTTPException(status_code=404, detail="API endpoint not found")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º index.html –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            return FileResponse(frontend_dist / "index.html")
            
    else:
        logger.warning(f"‚ùå Frontend build not found at {frontend_dist}")
        logger.info("üí° Run 'npm run build' in frontend directory")
        
        @app.get("/")
        async def root():
            return {
                "message": "ExoplanetAI Production API",
                "status": "running",
                "frontend": "not_built",
                "docs": "/api/docs",
                "health": "/health"
            }
    
    # Error handlers
    
    @app.exception_handler(HTTPException)
    async def http_exception_handler(request: Request, exc: HTTPException):
        logger.error(f"HTTP {exc.status_code}: {exc.detail}")
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "error": exc.detail,
                "status_code": exc.status_code,
                "timestamp": datetime.utcnow().isoformat()
            }
        )
    
    @app.exception_handler(Exception)
    async def general_exception_handler(request: Request, exc: Exception):
        logger.error(f"Unhandled exception: {exc}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={
                "error": "Internal server error",
                "status_code": 500,
                "timestamp": datetime.utcnow().isoformat()
            }
        )
    
    return app

async def run_training(job_id: str, request: TrainingRequest, user_id: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ WebSocket
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è:
    1. –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—É—é —ç–ø–æ—Ö—É
    3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    """
    session_id = f"training_{job_id}"
    
    try:
        logger.info(f"Starting training job {job_id}")
        
        for epoch in range(1, request.epochs + 1):
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —ç–ø–æ—Ö–∏
            await asyncio.sleep(0.1)  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
            loss = 1.0 - (epoch / request.epochs) * 0.8 + 0.1 * (0.5 - abs(0.5 - epoch / request.epochs))
            accuracy = (epoch / request.epochs) * 0.9 + 0.1
            val_loss = loss * 1.1
            val_accuracy = accuracy * 0.95
            
            eta_seconds = int((request.epochs - epoch) * 0.1)
            
            progress = TrainingProgress(
                job_id=job_id,
                epoch=epoch,
                total_epochs=request.epochs,
                loss=loss,
                accuracy=accuracy,
                val_loss=val_loss,
                val_accuracy=val_accuracy,
                eta_seconds=eta_seconds,
                status="training"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ WebSocket
            await manager.send_personal_message({
                "type": "training_progress",
                "data": progress.dict()
            }, session_id)
            
            logger.info(f"Training {job_id}: Epoch {epoch}/{request.epochs}, Loss: {loss:.4f}")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        await manager.send_personal_message({
            "type": "training_completed",
            "job_id": job_id,
            "message": "Training completed successfully",
            "final_accuracy": accuracy
        }, session_id)
        
        logger.info(f"Training job {job_id} completed successfully")
        
    except Exception as e:
        logger.error(f"Training job {job_id} failed: {e}")
        
        await manager.send_personal_message({
            "type": "training_error",
            "job_id": job_id,
            "error": str(e)
        }, session_id)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_app()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–ª—è development
    uvicorn.run(
        "main_production:app",
        host=config.server.host,
        port=config.server.port,
        reload=config.server.reload,
        log_level="info",
        access_log=True,
    )
