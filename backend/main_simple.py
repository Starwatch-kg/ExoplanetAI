"""
Simple Exoplanet AI Backend - Stable Version
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è backend —Å–µ—Ä–≤–µ—Ä–∞
"""

import time
import numpy as np
from typing import Dict, List, Optional, Any
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from pydantic import BaseModel, Field
import uvicorn

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
class SearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç"""
    target_name: str = Field(..., min_length=1, max_length=100, description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")
    catalog: str = Field("TIC", pattern="^(TIC|KIC|EPIC)$", description="–ö–∞—Ç–∞–ª–æ–≥")
    mission: str = Field("TESS", pattern="^(TESS|Kepler|K2)$", description="–ú–∏—Å—Å–∏—è")
    use_bls: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BLS –∞–Ω–∞–ª–∏–∑")
    use_ai: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –∞–Ω–∞–ª–∏–∑")
    use_ensemble: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ensemble –ø–æ–∏—Å–∫")
    search_mode: str = Field("ensemble", pattern="^(single|ensemble|comprehensive)$", description="–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")
    period_min: float = Field(0.5, ge=0.1, le=100.0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–Ω–∏)")
    period_max: float = Field(20.0, ge=0.1, le=100.0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–Ω–∏)")
    snr_threshold: float = Field(7.0, ge=3.0, le=20.0, description="–ü–æ—Ä–æ–≥ SNR")

class SearchResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç"""
    target_name: str
    catalog: str
    mission: str
    bls_result: Optional[Dict[str, Any]] = None
    ai_result: Optional[Dict[str, Any]] = None
    lightcurve_info: Dict[str, Any]
    star_info: Dict[str, Any]
    candidates_found: int
    processing_time_ms: float
    status: str
    request_id: Optional[str] = None

class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç health check"""
    status: str
    timestamp: str
    version: str
    environment: str
    services: Dict[str, str]

class BLSRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ BLS –∞–Ω–∞–ª–∏–∑"""
    target_name: str = Field(..., min_length=1, max_length=100, description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")
    catalog: str = Field("TIC", pattern="^(TIC|KIC|EPIC)$", description="–ö–∞—Ç–∞–ª–æ–≥")
    mission: str = Field("TESS", pattern="^(TESS|Kepler|K2)$", description="–ú–∏—Å—Å–∏—è")
    period_min: float = Field(0.5, ge=0.1, le=100.0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–Ω–∏)")
    period_max: float = Field(20.0, ge=0.1, le=100.0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–Ω–∏)")
    duration_min: float = Field(0.05, ge=0.01, le=1.0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–Ω–∏)")
    duration_max: float = Field(0.3, ge=0.01, le=1.0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–Ω–∏)")
    snr_threshold: float = Field(7.0, ge=3.0, le=20.0, description="–ü–æ—Ä–æ–≥ SNR")
    use_enhanced: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

class BLSResponse(BaseModel):
    """–û—Ç–≤–µ—Ç BLS –∞–Ω–∞–ª–∏–∑–∞"""
    target_name: str
    best_period: float
    best_t0: float
    best_duration: float
    best_power: float
    snr: float
    depth: float
    depth_err: float
    significance: float
    is_significant: bool
    enhanced_analysis: bool
    ml_confidence: float
    physical_validation: bool
    processing_time_ms: float
    request_id: Optional[str] = None

class CatalogResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞"""
    catalogs: List[str]
    missions: List[str]
    description: Dict[str, str]

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Exoplanet AI - Simple Stable Backend",
    description="""
    üåå **–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç**
    
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã:
    - üîç –ü–æ–∏—Å–∫ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç —Å BLS –∞–Ω–∞–ª–∏–∑–æ–º
    - ü§ñ –°–∏–º—É–ª—è—Ü–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    - üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - üõ°Ô∏è –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ CORS
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD"],
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    expose_headers=["*"]
)

# Gzip middleware
app.add_middleware(GZipMiddleware, minimum_size=1000)

# ===== ENDPOINTS =====

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Exoplanet AI Simple",
        "version": "1.0.0",
        "status": "active",
        "environment": "development",
        "message": "üåå Stable Exoplanet Detection System"
    }

@app.get("/api/v1/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    return HealthResponse(
        status="healthy",
        timestamp=time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
        version="1.0.0",
        environment="development",
        services={
            "api": "healthy",
            "bls": "healthy",
            "ai": "simulated",
            "cors": "enabled"
        }
    )

@app.get("/api/v1/test-cors")
async def test_cors(request: Request):
    """–¢–µ—Å—Ç CORS"""
    return {
        "message": "CORS —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ",
        "timestamp": time.time(),
        "origin": request.headers.get("origin", "unknown"),
        "method": request.method,
        "url": str(request.url),
        "status": "success"
    }

@app.options("/api/v1/{path:path}")
async def options_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS preflight"""
    return {"message": "OK"}

@app.post("/api/v1/search", response_model=SearchResponse)
async def search_exoplanets(request_data: SearchRequest):
    """
    üîç –ü–û–ò–°–ö –≠–ö–ó–û–ü–õ–ê–ù–ï–¢
    
    –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π BLS –∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    """
    print(f"üîç –ü–æ–∏—Å–∫ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç –¥–ª—è —Ü–µ–ª–∏: {request_data.target_name}")
    
    start_time = time.time()
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        np.random.seed(hash(request_data.target_name) % 2**32)
        
        bls_result = None
        ai_result = None
        candidates_found = 0
        
        # BLS –∞–Ω–∞–ª–∏–∑ (—Å–∏–º—É–ª—è—Ü–∏—è)
        if request_data.use_bls:
            best_period = np.random.uniform(request_data.period_min, request_data.period_max)
            snr = np.random.uniform(5.0, 15.0)
            depth = np.random.uniform(0.0005, 0.005)
            significance = np.random.uniform(0.8, 0.99)
            is_significant = snr > request_data.snr_threshold
            
            bls_result = {
                "best_period": round(best_period, 4),
                "best_t0": round(np.random.uniform(0.0, best_period), 4),
                "best_duration": round(np.random.uniform(0.05, 0.2), 4),
                "snr": round(snr, 2),
                "depth": round(depth, 6),
                "significance": round(significance, 3),
                "is_significant": is_significant,
                "ml_confidence": round(np.random.uniform(0.6, 0.95), 3)
            }
            
            if is_significant:
                candidates_found += 1
        
        # –ò–ò –∞–Ω–∞–ª–∏–∑ (—Å–∏–º—É–ª—è—Ü–∏—è)
        if request_data.use_ai:
            prediction = np.random.uniform(0.3, 0.9)
            confidence = np.random.uniform(0.6, 0.95)
            is_candidate = prediction > 0.7
            
            ai_result = {
                "prediction": round(prediction, 3),
                "confidence": round(confidence, 3),
                "is_candidate": is_candidate,
                "model_used": "ensemble_simulation",
                "inference_time_ms": round(np.random.uniform(50, 200), 1)
            }
            
            if is_candidate:
                candidates_found += 1
        
        processing_time_ms = round((time.time() - start_time) * 1000, 2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = SearchResponse(
            target_name=request_data.target_name,
            catalog=request_data.catalog,
            mission=request_data.mission,
            bls_result=bls_result,
            ai_result=ai_result,
            lightcurve_info={
                "points_count": 1000,
                "time_span_days": 30.0,
                "cadence_minutes": 30.0,
                "noise_level_ppm": 1000.0,
                "data_source": "simulation"
            },
            star_info={
                "target_id": request_data.target_name,
                "ra": round(np.random.uniform(0, 360), 3),
                "dec": round(np.random.uniform(-90, 90), 3),
                "magnitude": round(np.random.uniform(8, 16), 2),
                "temperature": round(np.random.uniform(3500, 7000), 0),
                "radius": round(np.random.uniform(0.5, 2.0), 2),
                "mass": round(np.random.uniform(0.5, 1.5), 2),
                "stellar_type": np.random.choice(["G", "K", "M", "F"])
            },
            candidates_found=candidates_found,
            processing_time_ms=processing_time_ms,
            status="success",
            request_id=f"req_{int(time.time())}"
        )
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {candidates_found} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞ {processing_time_ms}ms")
        return response
        
    except Exception as e:
        processing_time_ms = round((time.time() - start_time) * 1000, 2)
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        
        raise HTTPException(
            status_code=500,
            detail=f"Search failed: {str(e)}"
        )

@app.post("/api/v1/bls", response_model=BLSResponse)
async def analyze_bls(request_data: BLSRequest):
    """
    üìä BLS –ê–ù–ê–õ–ò–ó
    
    Box Least Squares –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
    """
    print(f"üìä BLS –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ü–µ–ª–∏: {request_data.target_name}")
    
    start_time = time.time()
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã BLS
        np.random.seed(hash(request_data.target_name) % 2**32)
        
        best_period = np.random.uniform(request_data.period_min, request_data.period_max)
        best_power = np.random.uniform(15.0, 30.0)
        snr = np.random.uniform(5.0, 15.0)
        depth = np.random.uniform(0.001, 0.008)
        significance = np.random.uniform(0.85, 0.99)
        is_significant = snr > request_data.snr_threshold
        
        processing_time_ms = round((time.time() - start_time) * 1000, 2)
        
        response = BLSResponse(
            target_name=request_data.target_name,
            best_period=round(best_period, 6),
            best_t0=round(np.random.uniform(0.0, best_period), 6),
            best_duration=round(np.random.uniform(request_data.duration_min, request_data.duration_max), 6),
            best_power=round(best_power, 6),
            snr=round(snr, 2),
            depth=round(depth, 6),
            depth_err=round(depth * 0.1, 6),
            significance=round(significance, 3),
            is_significant=is_significant,
            enhanced_analysis=request_data.use_enhanced,
            ml_confidence=round(np.random.uniform(0.7, 0.95), 3),
            physical_validation=is_significant,
            processing_time_ms=processing_time_ms,
            request_id=f"bls_{int(time.time())}"
        )
        
        print(f"‚úÖ BLS –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: P={response.best_period:.3f}d, SNR={response.snr:.1f}")
        return response
        
    except Exception as e:
        processing_time_ms = round((time.time() - start_time) * 1000, 2)
        print(f"‚ùå –û—à–∏–±–∫–∞ BLS –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        raise HTTPException(
            status_code=500,
            detail=f"BLS analysis failed: {str(e)}"
        )

@app.get("/api/v1/catalogs", response_model=CatalogResponse)
async def get_catalogs():
    """
    üìö –ö–ê–¢–ê–õ–û–ì–ò
    
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ –º–∏—Å—Å–∏–π
    """
    return CatalogResponse(
        catalogs=["TIC", "KIC", "EPIC"],
        missions=["TESS", "Kepler", "K2"],
        description={
            "TIC": "TESS Input Catalog - –∫–∞—Ç–∞–ª–æ–≥ —Ü–µ–ª–µ–π –¥–ª—è –º–∏—Å—Å–∏–∏ TESS",
            "KIC": "Kepler Input Catalog - –∫–∞—Ç–∞–ª–æ–≥ —Ü–µ–ª–µ–π –¥–ª—è –º–∏—Å—Å–∏–∏ Kepler",
            "EPIC": "Ecliptic Plane Input Catalog - –∫–∞—Ç–∞–ª–æ–≥ —Ü–µ–ª–µ–π –¥–ª—è –º–∏—Å—Å–∏–∏ K2",
            "TESS": "Transiting Exoplanet Survey Satellite",
            "Kepler": "Kepler Space Telescope",
            "K2": "K2 Mission (extended Kepler mission)"
        }
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    print("=" * 80)
    print("üöÄ STARTING EXOPLANET AI - SIMPLE STABLE VERSION")
    print("=" * 80)
    print("üåê Host: 0.0.0.0")
    print("üîå Port: 8000")
    print("üîÑ Reload: True")
    print("üìä Docs: http://localhost:8000/docs")
    print("üîç API: http://localhost:8000/api/v1/")
    print("üß™ CORS Test: http://localhost:8000/api/v1/test-cors")
    print("=" * 80)
    
    try:
        uvicorn.run(
            "main_simple:app",
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="info",
            access_log=True
        )
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
    except Exception as e:
        print(f"‚ùå Server failed to start: {e}")
        raise
