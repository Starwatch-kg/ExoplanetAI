"""
Transit Predictor with AI Assistant

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import torch
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
import logging
from dataclasses import dataclass
from enum import Enum

from .models.base_model import BaseTransitModel
from .ensemble import EnsembleClassifier
from .embeddings import EmbeddingManager

logger = logging.getLogger(__name__)

class ConfidenceLevel(Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"

@dataclass
class TransitPrediction:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–∞"""
    is_transit: bool
    confidence: float
    confidence_level: ConfidenceLevel
    transit_probability: float
    physical_parameters: Dict[str, Optional[float]]
    explanation: str
    recommendations: List[str]
    uncertainty_sources: List[str]

class TransitPredictor:
    """
    –ò–ò-–ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç
    """
    
    def __init__(self,
                 model: BaseTransitModel,
                 embedding_manager: EmbeddingManager,
                 device: str = 'cuda' if torch.cuda.is_available() else 'cpu',
                 confidence_threshold: float = 0.7):
        
        self.model = model
        self.embedding_manager = embedding_manager
        self.device = device
        self.confidence_threshold = confidence_threshold
        
        self.model.to(device)
        self.model.eval()
        
    def predict(self, 
                lightcurve: np.ndarray,
                target_name: str,
                stellar_params: Optional[Dict[str, float]] = None,
                return_embeddings: bool = False) -> TransitPrediction:
        """
        –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
        
        Args:
            lightcurve: –ö—Ä–∏–≤–∞—è –±–ª–µ—Å–∫–∞
            target_name: –ò–º—è —Ü–µ–ª–∏
            stellar_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–µ–∑–¥—ã
            return_embeddings: –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏ embeddings
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à embeddings
        cached_result = self.embedding_manager.get_cached_prediction(target_name)
        if cached_result:
            logger.info(f"Found cached prediction for {target_name}")
            return cached_result
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        x = torch.FloatTensor(lightcurve).unsqueeze(0).to(self.device)
        
        with torch.no_grad():
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            if isinstance(self.model, EnsembleClassifier):
                predictions, uncertainties, individual_preds = self.model.predict_with_uncertainty(x)
                transit_prob = individual_preds[list(individual_preds.keys())[0]][0, 1]
                uncertainty = uncertainties[0]
            else:
                logits = self.model(x)
                probs = torch.softmax(logits, dim=-1)
                transit_prob = probs[0, 1].item()
                uncertainty = self._calculate_uncertainty(probs[0])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è embeddings
            features = self.model.extract_features(x)
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_level = self._get_confidence_level(transit_prob, uncertainty)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        physical_params = self._estimate_physical_parameters(
            lightcurve, transit_prob, stellar_params
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation = self._generate_explanation(
            transit_prob, confidence_level, physical_params, uncertainty
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_recommendations(
            transit_prob, confidence_level, uncertainty
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
        uncertainty_sources = self._identify_uncertainty_sources(
            lightcurve, uncertainty, transit_prob
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = TransitPrediction(
            is_transit=transit_prob > self.confidence_threshold,
            confidence=transit_prob,
            confidence_level=confidence_level,
            transit_probability=transit_prob,
            physical_parameters=physical_params,
            explanation=explanation,
            recommendations=recommendations,
            uncertainty_sources=uncertainty_sources
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.embedding_manager.cache_prediction(
            target_name, features.cpu().numpy(), result
        )
        
        return result
    
    def _calculate_uncertainty(self, probs: torch.Tensor) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —ç–Ω—Ç—Ä–æ–ø–∏—é"""
        entropy = -torch.sum(probs * torch.log(probs + 1e-8))
        return entropy.item()
    
    def _get_confidence_level(self, prob: float, uncertainty: float) -> ConfidenceLevel:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if prob > 0.9 and uncertainty < 0.1:
            return ConfidenceLevel.VERY_HIGH
        elif prob > 0.8 and uncertainty < 0.2:
            return ConfidenceLevel.HIGH
        elif prob > 0.6 and uncertainty < 0.4:
            return ConfidenceLevel.MEDIUM
        else:
            return ConfidenceLevel.LOW
    
    def _estimate_physical_parameters(self,
                                    lightcurve: np.ndarray,
                                    transit_prob: float,
                                    stellar_params: Optional[Dict[str, float]]) -> Dict[str, Optional[float]]:
        """–û—Ü–µ–Ω–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–ª–∞–Ω–µ—Ç—ã"""
        if transit_prob < 0.5:
            return {
                'planet_radius': None,
                'orbital_period': None,
                'transit_depth': None,
                'transit_duration': None,
                'equilibrium_temperature': None
            }
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        
        # –ì–ª—É–±–∏–Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
        baseline = np.median(lightcurve)
        min_flux = np.min(lightcurve)
        transit_depth = (baseline - min_flux) / baseline * 1e6  # –≤ ppm
        
        # –†–∞–¥–∏—É—Å –ø–ª–∞–Ω–µ—Ç—ã (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        stellar_radius = stellar_params.get('radius', 1.0) if stellar_params else 1.0
        planet_radius = np.sqrt(transit_depth / 1e6) * stellar_radius * 109.2  # –≤ —Ä–∞–¥–∏—É—Å–∞—Ö –ó–µ–º–ª–∏
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–æ—á–µ–Ω—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        stellar_temp = stellar_params.get('temperature', 5778) if stellar_params else 5778
        equilibrium_temp = stellar_temp * 0.5  # –û—á–µ–Ω—å –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞
        
        return {
            'planet_radius': planet_radius if planet_radius > 0 else None,
            'orbital_period': None,  # –¢—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            'transit_depth': transit_depth,
            'transit_duration': None,  # –¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã —Ç—Ä–∞–Ω–∑–∏—Ç–∞
            'equilibrium_temperature': equilibrium_temp
        }
    
    def _generate_explanation(self,
                            transit_prob: float,
                            confidence_level: ConfidenceLevel,
                            physical_params: Dict[str, Optional[float]],
                            uncertainty: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        
        if transit_prob > 0.8:
            base_text = "üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–ª—å–Ω—ã–π —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª! "
        elif transit_prob > 0.6:
            base_text = "üîç –ù–∞–π–¥–µ–Ω –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª. "
        elif transit_prob > 0.4:
            base_text = "‚ùì –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–∞–Ω–∑–∏—Ç. "
        else:
            base_text = "‚ùå –¢—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence_level == ConfidenceLevel.VERY_HIGH:
            confidence_text = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."
        elif confidence_level == ConfidenceLevel.HIGH:
            confidence_text = "–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."
        elif confidence_level == ConfidenceLevel.MEDIUM:
            confidence_text = "–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞."
        else:
            confidence_text = "–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params_text = ""
        if physical_params.get('planet_radius'):
            params_text += f" –û—Ü–µ–Ω–æ—á–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–ª–∞–Ω–µ—Ç—ã: {physical_params['planet_radius']:.1f} R‚äï."
        
        if physical_params.get('transit_depth'):
            params_text += f" –ì–ª—É–±–∏–Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞: {physical_params['transit_depth']:.0f} ppm."
        
        return base_text + confidence_text + params_text
    
    def _generate_recommendations(self,
                                transit_prob: float,
                                confidence_level: ConfidenceLevel,
                                uncertainty: float) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        if transit_prob > 0.7:
            recommendations.append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            recommendations.append("üìä –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ (RV, TTV)")
        
        if confidence_level == ConfidenceLevel.LOW:
            recommendations.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã BLS –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        
        if uncertainty > 0.5:
            recommendations.append("‚ùì –í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å - –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        if transit_prob > 0.5:
            recommendations.append("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –ª–æ–∂–Ω—ã–µ –ø–æ–∑–∏—Ç–∏–≤—ã (–∑–∞—Ç–º–µ–Ω–Ω—ã–µ –¥–≤–æ–π–Ω—ã–µ)")
            recommendations.append("üìà –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç")
        
        return recommendations
    
    def _identify_uncertainty_sources(self,
                                    lightcurve: np.ndarray,
                                    uncertainty: float,
                                    transit_prob: float) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏"""
        sources = []
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        noise_level = np.std(lightcurve)
        if noise_level > 0.01:
            sources.append("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if len(lightcurve) < 1000:
            sources.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        if uncertainty > 0.3:
            sources.append("–ú–æ–¥–µ–ª—å –Ω–µ —É–≤–µ—Ä–µ–Ω–∞ –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª
        if 0.4 < transit_prob < 0.6:
            sources.append("–°–∏–≥–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
        
        return sources


class AIAssistant:
    """
    –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    """
    
    def __init__(self):
        self.educational_mode = True
    
    def explain_for_beginners(self, prediction: TransitPrediction, target_name: str) -> str:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"""
        
        explanation = f"üåü –ê–Ω–∞–ª–∏–∑ –∑–≤–µ–∑–¥—ã {target_name}:\n\n"
        
        if prediction.is_transit:
            explanation += "üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ú—ã –Ω–∞—à–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–ª–∞–Ω–µ—Ç—ã —É —ç—Ç–æ–π –∑–≤–µ–∑–¥—ã!\n\n"
            
            explanation += "üî¨ –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?\n"
            explanation += "‚Ä¢ –ü–ª–∞–Ω–µ—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–¥ —Å–≤–æ–µ–π –∑–≤–µ–∑–¥–æ–π (—ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '—Ç—Ä–∞–Ω–∑–∏—Ç')\n"
            explanation += "‚Ä¢ –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–µ—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Å—Ç—å —Å–≤–µ—Ç–∞ –∑–≤–µ–∑–¥—ã, –º—ã –≤–∏–¥–∏–º –Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ—Ç–µ–º–Ω–µ–Ω–∏–µ\n"
            explanation += "‚Ä¢ –ù–∞—à –ò–ò –æ–±–Ω–∞—Ä—É–∂–∏–ª —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª –≤ –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            if prediction.physical_parameters.get('planet_radius'):
                radius = prediction.physical_parameters['planet_radius']
                if radius < 1.5:
                    size_desc = "—Ä–∞–∑–º–µ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫ –ó–µ–º–ª—è"
                elif radius < 4:
                    size_desc = "—Å—É–ø–µ—Ä–∑–µ–º–ª—è (–±–æ–ª—å—à–µ –ó–µ–º–ª–∏, –Ω–æ –º–µ–Ω—å—à–µ –ù–µ–ø—Ç—É–Ω–∞)"
                else:
                    size_desc = "–≥–∞–∑–æ–≤—ã–π –≥–∏–≥–∞–Ω—Ç (–∫–∞–∫ –Æ–ø–∏—Ç–µ—Ä)"
                
                explanation += f"ü™ê –ü–ª–∞–Ω–µ—Ç–∞ {size_desc} ({radius:.1f} —Ä–∞–¥–∏—É—Å–æ–≤ –ó–µ–º–ª–∏)\n\n"
        
        else:
            explanation += "üîç –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–ª–∞–Ω–µ—Ç—ã —É —ç—Ç–æ–π –∑–≤–µ–∑–¥—ã.\n\n"
            explanation += "–≠—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–ª–∞–Ω–µ—Ç —Ç–æ—á–Ω–æ –Ω–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ:\n"
            explanation += "‚Ä¢ –ü–ª–∞–Ω–µ—Ç—ã –µ—Å—Ç—å, –Ω–æ –∏—Ö –æ—Ä–±–∏—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–µ—Ä–µ–¥ –∑–≤–µ–∑–¥–æ–π\n"
            explanation += "‚Ä¢ –°–∏–≥–Ω–∞–ª —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è\n"
            explanation += "‚Ä¢ –ù—É–∂–Ω—ã –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        
        # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_emoji = {
            ConfidenceLevel.VERY_HIGH: "üéØ",
            ConfidenceLevel.HIGH: "‚úÖ", 
            ConfidenceLevel.MEDIUM: "ü§î",
            ConfidenceLevel.LOW: "‚ùì"
        }
        
        explanation += f"{confidence_emoji[prediction.confidence_level]} –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: "
        explanation += f"{prediction.confidence_level.value} ({prediction.confidence:.1%})\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        if prediction.recommendations:
            explanation += "üí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:\n"
            for rec in prediction.recommendations[:3]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                explanation += f"‚Ä¢ {rec}\n"
        
        return explanation
    
    def compare_with_known_planets(self, prediction: TransitPrediction) -> str:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–ª–∞–Ω–µ—Ç–∞–º–∏"""
        
        if not prediction.is_transit:
            return "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - —Ç—Ä–∞–Ω–∑–∏—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω."
        
        radius = prediction.physical_parameters.get('planet_radius')
        if not radius:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
        
        comparisons = []
        
        if radius < 1.2:
            comparisons.append("–ü–æ—Ö–æ–∂–∞ –Ω–∞ –ó–µ–º–ª—é –ø–æ —Ä–∞–∑–º–µ—Ä—É")
        elif radius < 1.8:
            comparisons.append("–ö–∞–∫ Kepler-452b ('–∫—É–∑–∏–Ω–∞ –ó–µ–º–ª–∏')")
        elif radius < 4:
            comparisons.append("–ö–∞–∫ –ù–µ–ø—Ç—É–Ω - —Å—É–ø–µ—Ä–∑–µ–º–ª—è")
        else:
            comparisons.append("–ö–∞–∫ –Æ–ø–∏—Ç–µ—Ä - –≥–∞–∑–æ–≤—ã–π –≥–∏–≥–∞–Ω—Ç")
        
        temp = prediction.physical_parameters.get('equilibrium_temperature')
        if temp:
            if temp < 200:
                comparisons.append("–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–∞—è (–∫–∞–∫ –ü–ª—É—Ç–æ–Ω)")
            elif temp < 400:
                comparisons.append("–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–∞ –∂–∏–∑–Ω—å)")
            elif temp < 1000:
                comparisons.append("–ì–æ—Ä—è—á–∞—è (–∫–∞–∫ –í–µ–Ω–µ—Ä–∞)")
            else:
                comparisons.append("–û—á–µ–Ω—å –≥–æ—Ä—è—á–∞—è (—Ä–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å)")
        
        return "üåç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: " + ", ".join(comparisons)
    
    def explain_habitability(self, prediction: TransitPrediction) -> str:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏"""
        
        if not prediction.is_transit:
            return "–ü–ª–∞–Ω–µ—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - –æ—Ü–µ–Ω–∫–∞ –æ–±–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
        
        radius = prediction.physical_parameters.get('planet_radius', 0)
        temp = prediction.physical_parameters.get('equilibrium_temperature', 0)
        
        habitability_score = 0
        factors = []
        
        # –†–∞–∑–º–µ—Ä
        if 0.5 < radius < 2.0:
            habitability_score += 2
            factors.append("‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞–º–µ–Ω–∏—Å—Ç–æ–π –ø–ª–∞–Ω–µ—Ç—ã")
        elif radius > 4:
            factors.append("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è - –≤–µ—Ä–æ—è—Ç–Ω–æ –≥–∞–∑–æ–≤—ã–π –≥–∏–≥–∞–Ω—Ç")
        else:
            factors.append("‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        if 200 < temp < 400:
            habitability_score += 3
            factors.append("‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∂–∏–¥–∫–æ–π –≤–æ–¥—ã")
        elif temp > 1000:
            factors.append("‚ùå –°–ª–∏—à–∫–æ–º –≥–æ—Ä—è—á–∞—è –¥–ª—è –∂–∏–∑–Ω–∏")
        elif temp < 100:
            factors.append("‚ùå –°–ª–∏—à–∫–æ–º —Ö–æ–ª–æ–¥–Ω–∞—è")
        else:
            factors.append("‚ö†Ô∏è –ü–æ–≥—Ä–∞–Ω–∏—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        if habitability_score >= 4:
            result = "üåç –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ–±–∏—Ç–∞–µ–º–æ—Å—Ç–∏!"
        elif habitability_score >= 2:
            result = "ü§î –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ–¥–Ω–∞ –¥–ª—è –∂–∏–∑–Ω–∏"
        else:
            result = "‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ –ø—Ä–∏–≥–æ–¥–Ω–∞ –¥–ª—è –∂–∏–∑–Ω–∏"
        
        explanation = f"{result}\n\n–§–∞–∫—Ç–æ—Ä—ã:\n"
        for factor in factors:
            explanation += f"‚Ä¢ {factor}\n"
        
        return explanation
