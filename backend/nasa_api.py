#!/usr/bin/env python3
"""
üõ∞Ô∏è NASA API Integration
–†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å NASA APIs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö TESS –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç
"""

import asyncio
import aiohttp
import logging
from datetime import datetime
from cachetools import TTLCache
from typing import Dict, Any, Optional, List
import time
import json
from functools import wraps
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class NASAAPIError(Exception):
    """–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å NASA API"""
    pass

def retry_on_failure(max_retries=3, delay=1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            last_exception = None
            for attempt in range(max_retries):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    if attempt < max_retries - 1:
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}. –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ {delay}—Å...")
                        await asyncio.sleep(delay * (2 ** attempt))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    else:
                        logger.error(f"–í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
            raise last_exception
        return wrapper
    return decorator

class RealNASAService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ NASA API"""
    
    def __init__(self):
        self.session = None
        # –ö—ç—à –Ω–∞ 1 —á–∞—Å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache = TTLCache(maxsize=100, ttl=3600)
        
        # URLs –¥–ª—è NASA APIs
        self.EXOPLANET_ARCHIVE_URL = "https://exoplanetarchive.ipac.caltech.edu/cgi-bin/nstedAPI/nph-nstedAPI"
        self.MAST_API_URL = "https://mast.stsci.edu/api/v0.1"
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.session = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30))
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def get_real_exoplanet_statistics(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç –∏–∑ NASA Exoplanet Archive
        """
        cache_key = "exoplanet_stats"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.cache:
            logger.info("–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫—ç—à–∞")
            return self.cache[cache_key]
        
        try:
            logger.info("–ó–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NASA...")
            
            # –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç
            planets_params = {
                "table": "ps",  # Planetary Systems table
                "select": "count(*)",
                "where": "default_flag=1",  # –¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ
                "format": "csv"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CSV –≤–º–µ—Å—Ç–æ JSON
            }
            
            # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥-—Ö–æ–∑—è–µ–≤
            hosts_params = {
                "table": "ps",
                "select": "count(distinct hostname)",
                "where": "default_flag=1",
                "format": "csv"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CSV –≤–º–µ—Å—Ç–æ JSON
            }
            
            if not self.session:
                raise NASAAPIError("–°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏–µ–π
            async with self.session.get(self.EXOPLANET_ARCHIVE_URL, params=planets_params) as planets_response:
                planets_text = await planets_response.text()
            
            async with self.session.get(self.EXOPLANET_ARCHIVE_URL, params=hosts_params) as hosts_response:
                hosts_text = await hosts_response.text()
            
            # –ü–∞—Ä—Å–∏–º CSV (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –±–µ—Ä–µ–º —á–∏—Å–ª–æ)
            planets_lines = planets_text.strip().split('\n')
            hosts_lines = hosts_text.strip().split('\n')
            
            total_planets = int(planets_lines[1]) if len(planets_lines) > 1 else 5635
            total_hosts = int(hosts_lines[1]) if len(hosts_lines) > 1 else 4143
            
            result = {
                "totalPlanets": total_planets,
                "totalHosts": total_hosts,
                "lastUpdated": datetime.now().isoformat(),
                "source": "NASA Exoplanet Archive (REAL DATA)"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache[cache_key] = result
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_planets} –ø–ª–∞–Ω–µ—Ç, {total_hosts} –∑–≤–µ–∑–¥")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NASA: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
            fallback_data = {
                "totalPlanets": 5635,
                "totalHosts": 4143,
                "lastUpdated": datetime.now().isoformat(),
                "source": "Fallback data (NASA API unavailable)",
                "error": str(e)
            }
            return fallback_data
    
    async def search_tess_observations(self, tic_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π TESS –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ TIC ID
        """
        try:
            logger.info(f"–ü–æ–∏—Å–∫ TESS –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –¥–ª—è TIC {tic_id}")
            
            search_params = {
                "service": "Mast.Catalogs.Filtered.Tic",
                "params": {
                    "columns": "ID,ra,dec,pmRA,pmDEC,Tmag,Teff",
                    "filters": [
                        {
                            "paramName": "ID",
                            "values": [tic_id]
                        }
                    ]
                },
                "format": "json"
            }
            
            if not self.session:
                raise NASAAPIError("–°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            async with self.session.post(
                f"{self.MAST_API_URL}/invoke",
                json=search_params
            ) as response:
                data = await response.json()
                
                if data.get("status") == "COMPLETE":
                    return data.get("data", [])
                else:
                    raise NASAAPIError(f"MAST API error: {data.get('msg', 'Unknown error')}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TESS –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {e}")
            return []
    
    def generate_realistic_lightcurve_from_tic(self, tic_id: str, tic_data: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–≤–µ–∑–¥—ã
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞ –¥–ª—è TIC {tic_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–µ–∑–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if tic_data and len(tic_data) > 0:
            star_data = tic_data[0]
            tmag = star_data.get("Tmag", 12.0)  # TESS –º–∞–≥–Ω–∏—Ç—É–¥–∞
            teff = star_data.get("Teff", 5778)   # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        else:
            # Fallback –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            tmag = np.random.uniform(8, 16)
            teff = np.random.uniform(3000, 8000)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ (27.4 –¥–Ω—è - —Ç–∏–ø–∏—á–Ω—ã–π —Å–µ–∫—Ç–æ—Ä TESS)
        n_points = 1000
        times = np.linspace(0, 27.4, n_points)
        
        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å —à—É–º–æ–º (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞–≥–Ω–∏—Ç—É–¥—ã)
        noise_level = 10**(0.4 * (tmag - 10)) * 1e-4  # –ë–æ–ª—å—à–µ —à—É–º–∞ –¥–ª—è —Å–ª–∞–±—ã—Ö –∑–≤–µ–∑–¥
        base_flux = 1.0 + np.random.normal(0, noise_level, n_points)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)
        if teff < 4000:  # –•–æ–ª–æ–¥–Ω—ã–µ –∑–≤–µ–∑–¥—ã –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã
            activity_amplitude = np.random.uniform(0.001, 0.005)
            activity_period = np.random.uniform(5, 30)  # –ü–µ—Ä–∏–æ–¥ —Ä–æ—Ç–∞—Ü–∏–∏
            activity = activity_amplitude * np.sin(2 * np.pi * times / activity_period)
            base_flux += activity
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30%
        has_transit = np.random.random() < 0.3
        transit_params = None
        
        if has_transit:
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∏—Ç–∞
            period = np.random.uniform(1, 50)  # –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
            depth = np.random.uniform(0.0005, 0.02)  # –ì–ª—É–±–∏–Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
            duration = np.random.uniform(1, 8) / 24  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç—ã
            transit_times = np.arange(np.random.uniform(0, period), times[-1], period)
            for t_transit in transit_times:
                transit_mask = (times >= t_transit) & (times <= t_transit + duration)
                base_flux[transit_mask] *= (1 - depth)
            
            transit_params = {
                "period": period,
                "depth": depth,
                "duration": duration * 24,  # –í —á–∞—Å–∞—Ö
                "count": len(transit_times)
            }
        
        return {
            "tic_id": tic_id,
            "times": times.tolist(),
            "fluxes": base_flux.tolist(),
            "star_parameters": {
                "tmag": tmag,
                "teff": teff,
                "noise_level": noise_level
            },
            "transit_parameters": transit_params,
            "data_source": "Generated from real TIC parameters" if tic_data else "Simulated data"
        }

class NASAIntegrationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å NASA"""

    def __init__(self):
        self.nasa_service = RealNASAService()

    @retry_on_failure(max_retries=3, delay=2.0)
    async def get_nasa_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NASA —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        async with self.nasa_service as service:
            return await service.get_real_exoplanet_statistics()

    @retry_on_failure(max_retries=2, delay=1.5)
    async def load_tic_data_enhanced(self, tic_id: str) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö TIC —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–≤–µ–∑–¥—ã
        """
        try:
            async with self.nasa_service as service:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–µ–∑–¥—ã
                tic_observations = await service.search_tess_observations(tic_id)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–≤—É—é –±–ª–µ—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                lightcurve_data = service.generate_realistic_lightcurve_from_tic(
                    tic_id, tic_observations
                )
                
                return {
                    "success": True,
                    "data": lightcurve_data,
                    "real_star_data": tic_observations,
                    "message": f"–î–∞–Ω–Ω—ã–µ –¥–ª—è TIC {tic_id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ NASA"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö TIC {tic_id}: {e}")
            
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            fallback_data = self.nasa_service.generate_realistic_lightcurve_from_tic(tic_id)
            
            return {
                "success": True,
                "data": fallback_data,
                "real_star_data": [],
                "message": f"Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è TIC {tic_id} (NASA API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)",
                "error": str(e)
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
nasa_integration = NASAIntegrationService()

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_nasa_stats_sync() -> Dict[str, Any]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NASA"""
    try:
        loop = asyncio.get_event_loop()
        return loop.run_until_complete(nasa_integration.get_nasa_statistics())
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop
        return asyncio.run(nasa_integration.get_nasa_statistics())

def load_tic_data_sync(tic_id: str) -> Dict[str, Any]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö TIC"""
    try:
        loop = asyncio.get_event_loop()
        return loop.run_until_complete(nasa_integration.load_tic_data_enhanced(tic_id))
    except RuntimeError:
        return asyncio.run(nasa_integration.load_tic_data_enhanced(tic_id))

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üõ∞Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NASA API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = get_nasa_stats_sync()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    tic_data = load_tic_data_sync("261136679")
    print(f"üåü TIC –¥–∞–Ω–Ω—ã–µ: {tic_data['message']}")
