#!/usr/bin/env python3
"""
üåå Exoplanet AI - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FastAPI Backend
–í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –û–û–ü + Clean Code + SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Any, Optional, Union
from datetime import datetime
from abc import ABC, abstractmethod
import json
import numpy as np

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field, validator
import uvicorn


# ================================
# üìä DATA MODELS (Pydantic)
# ================================

class TICRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö TESS –ø–æ TIC ID"""
    tic_id: str = Field(..., description="TESS Input Catalog ID")
    sectors: Optional[List[int]] = Field(None, description="–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
    
    @validator('tic_id')
    def validate_tic_id(cls, v):
        if not v.strip():
            raise ValueError('TIC ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return v.strip()


class LightcurveData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
    tic_id: str = Field(..., description="TIC ID –∑–≤–µ–∑–¥—ã")
    times: List[float] = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏")
    fluxes: List[float] = Field(..., description="–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞")
    
    @validator('times', 'fluxes')
    def validate_arrays(cls, v):
        if len(v) < 10:
            raise ValueError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω–∏–º—É–º 10 —Ç–æ—á–µ–∫)')
        return v


class ExoplanetCandidate(BaseModel):
    """–ö–∞–Ω–¥–∏–¥–∞—Ç –≤ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç—ã"""
    id: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    period: float = Field(..., description="–ü–µ—Ä–∏–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è (–¥–Ω–∏)")
    depth: float = Field(..., description="–ì–ª—É–±–∏–Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞")
    duration: float = Field(..., description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∏—Ç–∞ (—á–∞—Å—ã)")
    confidence: float = Field(..., ge=0, le=1, description="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
    start_time: float = Field(..., description="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞")
    end_time: float = Field(..., description="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–∞")
    method: str = Field(..., description="–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")


class AnalysisRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
    lightcurve_data: LightcurveData
    model_type: str = Field(..., description="–¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parameters: Optional[Dict[str, Any]] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")


class AnalysisResponse(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
    success: bool = Field(..., description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞")
    candidates: List[ExoplanetCandidate] = Field(..., description="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã")
    processing_time: float = Field(..., description="–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)")
    model_used: str = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
    statistics: Dict[str, Any] = Field(..., description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
    error: Optional[str] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")


# ================================
# üî¨ BUSINESS LOGIC CLASSES
# ================================

class TransitCandidate:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞"""
    
    def __init__(self, period: float, depth: float, duration: float, 
                 confidence: float, start_time: float, end_time: float, method: str):
        self.period = period
        self.depth = depth
        self.duration = duration
        self.confidence = confidence
        self.start_time = start_time
        self.end_time = end_time
        self.method = method
    
    def to_api_model(self, candidate_id: str) -> ExoplanetCandidate:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ API –º–æ–¥–µ–ª—å"""
        return ExoplanetCandidate(
            id=candidate_id,
            period=self.period,
            depth=self.depth,
            duration=self.duration,
            confidence=self.confidence,
            start_time=self.start_time,
            end_time=self.end_time,
            method=self.method
        )


class ITransitDetector(ABC):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤"""
    
    @abstractmethod
    def detect_transits(self, times: np.ndarray, fluxes: np.ndarray) -> List[TransitCandidate]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –≤ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
        pass


class SimpleTransitDetector(ITransitDetector):
    """–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, threshold_sigma: float = 2.0, min_points: int = 5):
        self.threshold_sigma = threshold_sigma
        self.min_points = min_points
        self.logger = logging.getLogger(self.__class__.__name__)
    
    def detect_transits(self, times: np.ndarray, fluxes: np.ndarray) -> List[TransitCandidate]:
        """
        –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤:
        1. –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç–∏ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º
        2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
        3. –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        """
        self.logger.info(f"–ê–Ω–∞–ª–∏–∑ {len(times)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç–æ–∫–∞
        mean_flux = np.mean(fluxes)
        std_flux = np.std(fluxes)
        threshold = mean_flux - self.threshold_sigma * std_flux
        
        # –ü–æ–∏—Å–∫ –æ–±–ª–∞—Å—Ç–µ–π —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
        in_transit = fluxes < threshold
        transit_groups = self._group_consecutive_points(in_transit)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = []
        for i, group in enumerate(transit_groups):
            if len(group) >= self.min_points:
                candidate = self._create_candidate_from_group(
                    group, times, fluxes, mean_flux, f"simple_{i}"
                )
                candidates.append(candidate)
        
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        return candidates[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –¥–µ–º–æ
    
    def _group_consecutive_points(self, in_transit: np.ndarray) -> List[List[int]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ —Ç—Ä–∞–Ω–∑–∏—Ç–∞"""
        groups = []
        current_group = []
        
        for i, is_transit in enumerate(in_transit):
            if is_transit:
                current_group.append(i)
            else:
                if current_group:
                    groups.append(current_group)
                    current_group = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        if current_group:
            groups.append(current_group)
        
        return groups
    
    def _create_candidate_from_group(
        self, 
        group: List[int], 
        times: np.ndarray, 
        fluxes: np.ndarray, 
        mean_flux: float,
        method: str
    ) -> TransitCandidate:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã —Ç–æ—á–µ–∫"""
        start_idx, end_idx = group[0], group[-1]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∏—Ç–∞
        period = np.random.uniform(5, 20)  # –î–µ–º–æ: —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        depth = (mean_flux - np.mean(fluxes[group])) / mean_flux
        duration = (times[end_idx] - times[start_idx]) * 24  # –≤ —á–∞—Å–∞—Ö
        confidence = min(0.95, len(group) / 20.0)  # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        
        return TransitCandidate(
            period=period,
            depth=abs(depth),
            duration=duration,
            confidence=confidence,
            start_time=times[start_idx],
            end_time=times[end_idx],
            method=method
        )


class TESSDataService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ TESS"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.cache = {}  # –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à
    
    async def load_lightcurve(self, tic_id: str, sectors: Optional[List[int]] = None) -> LightcurveData:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞ –ø–æ TIC ID"""
        self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TIC {tic_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{tic_id}_{sectors}"
        if cache_key in self.cache:
            self.logger.info("–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ")
            return self.cache[cache_key]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ MAST)
        demo_data = self._generate_demo_lightcurve(tic_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.cache[cache_key] = demo_data
        
        return demo_data
    
    def _generate_demo_lightcurve(self, tic_id: str) -> LightcurveData:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
        np.random.seed(hash(tic_id) % 2**32)  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫—Ä–∏–≤—É—é –±–ª–µ—Å–∫–∞
        n_points = 1000
        times = np.linspace(0, 27.4, n_points)  # 27.4 –¥–Ω—è (—Å–µ–∫—Ç–æ—Ä TESS)
        
        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å —à—É–º–æ–º
        base_flux = 1.0 + np.random.normal(0, 0.001, n_points)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if hash(tic_id) % 3 == 0:  # 1/3 –∑–≤–µ–∑–¥ –∏–º–µ—é—Ç —Ç—Ä–∞–Ω–∑–∏—Ç—ã
            base_flux = self._add_demo_transits(times, base_flux)
        
        return LightcurveData(
            tic_id=tic_id,
            times=times.tolist(),
            fluxes=base_flux.tolist()
        )
    
    def _add_demo_transits(self, times: np.ndarray, fluxes: np.ndarray) -> np.ndarray:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤"""
        period = np.random.uniform(8, 15)  # –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
        depth = np.random.uniform(0.001, 0.01)  # –ì–ª—É–±–∏–Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
        duration = np.random.uniform(2, 6) / 24  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç—ã
        for phase in np.arange(0, times[-1], period):
            transit_mask = (times >= phase) & (times <= phase + duration)
            fluxes[transit_mask] *= (1 - depth)
        
        return fluxes


class ExoplanetAnalysisService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.detector = SimpleTransitDetector()
        self.results_cache = {}
    
    async def analyze_lightcurve(self, request: AnalysisRequest) -> AnalysisResponse:
        """–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
        start_time = datetime.now()
        
        try:
            self.logger.info(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –º–æ–¥–µ–ª—å—é {request.model_type}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            times = np.array(request.lightcurve_data.times)
            fluxes = np.array(request.lightcurve_data.fluxes)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
            transit_candidates = self.detector.detect_transits(times, fluxes)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ API –º–æ–¥–µ–ª–∏
            api_candidates = [
                candidate.to_api_model(f"{request.model_type}_{i}")
                for i, candidate in enumerate(transit_candidates)
            ]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            processing_time = (datetime.now() - start_time).total_seconds()
            statistics = self._calculate_statistics(api_candidates, times, processing_time)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._cache_results(request.lightcurve_data.tic_id, api_candidates, statistics)
            
            return AnalysisResponse(
                success=True,
                candidates=api_candidates,
                processing_time=processing_time,
                model_used=request.model_type,
                statistics=statistics
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            processing_time = (datetime.now() - start_time).total_seconds()
            
            return AnalysisResponse(
                success=False,
                candidates=[],
                processing_time=processing_time,
                model_used=request.model_type,
                statistics={},
                error=str(e)
            )
    
    def _calculate_statistics(
        self, 
        candidates: List[ExoplanetCandidate], 
        times: np.ndarray, 
        processing_time: float
    ) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            "total_candidates": len(candidates),
            "average_confidence": np.mean([c.confidence for c in candidates]) if candidates else 0,
            "processing_time": processing_time,
            "data_points": len(times),
            "time_span": float(times[-1] - times[0]) if len(times) > 1 else 0,
            "analysis_timestamp": datetime.now().isoformat()
        }
    
    def _cache_results(
        self, 
        tic_id: str, 
        candidates: List[ExoplanetCandidate], 
        statistics: Dict[str, Any]
    ):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        self.results_cache[tic_id] = {
            "candidates": [candidate.dict() for candidate in candidates],
            "statistics": statistics,
            "timestamp": datetime.now().isoformat()
        }


# ================================
# üöÄ FASTAPI APPLICATION
# ================================

class ExoplanetAPI:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.app = FastAPI(
            title="üåå Exoplanet AI API",
            description="–í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò",
            version="2.0.0",
            docs_url="/docs",
            redoc_url="/redoc"
        )
        
        self.logger = logging.getLogger(self.__class__.__name__)
        self.tess_service = TESSDataService()
        self.analysis_service = ExoplanetAnalysisService()
        
        self._setup_middleware()
        self._setup_routes()
        self._setup_startup_events()
    
    def _setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    
    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        @self.app.get("/", tags=["System"])
        async def root():
            """üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
            return {
                "message": "üåå Exoplanet AI API",
                "version": "2.0.0",
                "status": "active",
                "timestamp": datetime.now().isoformat(),
                "endpoints": {
                    "health": "/health",
                    "nasa_stats": "/api/nasa/stats",
                    "load_data": "/load-tic",
                    "analyze": "/analyze",
                    "docs": "/docs"
                }
            }
        
        @self.app.get("/health", tags=["System"])
        async def health_check():
            """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
            return {
                "status": "healthy",
                "timestamp": datetime.now().isoformat(),
                "version": "2.0.0",
                "services": {
                    "tess_data": "active",
                    "analysis": "active",
                    "cache": f"{len(self.analysis_service.results_cache)} results cached"
                }
            }
        
        @self.app.get("/api/nasa/stats", tags=["Data"])
        async def get_nasa_stats():
            """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ NASA –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞"""
            return {
                "totalPlanets": 5635,  # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NASA
                "totalHosts": 4143,
                "lastUpdated": "2024-01-15",
                "source": "NASA Exoplanet Archive"
            }
        
        @self.app.post("/load-tic", response_model=Dict[str, Any], tags=["Data"])
        async def load_tic_data(request: TICRequest):
            """üõ∞Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö TESS –ø–æ TIC ID"""
            try:
                self.logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TIC {request.tic_id}")
                
                lightcurve_data = await self.tess_service.load_lightcurve(
                    request.tic_id, 
                    request.sectors
                )
                
                return {
                    "success": True,
                    "data": lightcurve_data.dict(),
                    "message": f"–î–∞–Ω–Ω—ã–µ –¥–ª—è TIC {request.tic_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
                }
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TIC {request.tic_id}: {e}")
                raise HTTPException(
                    status_code=500, 
                    detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
                )
        
        @self.app.post("/analyze", response_model=AnalysisResponse, tags=["Analysis"])
        async def analyze_lightcurve(request: AnalysisRequest):
            """üî¨ –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç"""
            return await self.analysis_service.analyze_lightcurve(request)
    
    def _setup_startup_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—Å–∫–∞"""
        
        @self.app.on_event("startup")
        async def startup_event():
            """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
            self.logger.info("üåå –ó–∞–ø—É—Å–∫ Exoplanet AI API v2.0.0")
            self.logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")


# ================================
# üéØ APPLICATION ENTRY POINT
# ================================

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
api_instance = ExoplanetAPI()
app = api_instance.app

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

if __name__ == "__main__":
    uvicorn.run(
        "main_optimized:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
