"""
UNIFIED SEARCH SERVICE v8.0
–ï–¥–∏–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É BLS –∏ ENSEMBLE —Ä–µ–∂–∏–º–∞–º–∏
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ—â–Ω—ã–π –∏ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç
"""

from dataclasses import dataclass
from enum import Enum

import numpy as np

from core.logging import get_logger
from services.bls_service import BLSResult, BLSService
from services.ensemble_search_service import (
    EnsembleSearchResult,
    UltimateEnsembleSearchEngine,
)

logger = get_logger(__name__)


class SearchMode(Enum):
    """–†–µ–∂–∏–º—ã –ø–æ–∏—Å–∫–∞"""

    BLS = "bls"
    ENSEMBLE = "ensemble"
    HYBRID = "hybrid"  # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º


@dataclass
class UnifiedSearchRequest:
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""

    target_name: str
    time: np.ndarray
    flux: np.ndarray
    flux_err: Optional[np.ndarray] = None

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    search_mode: SearchMode = SearchMode.BLS
    period_min: float = 0.5
    period_max: float = 50.0
    snr_threshold: float = 7.0

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    stellar_params: Optional[Dict] = None
    search_config: Optional[Dict] = None

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    use_parallel: bool = True
    max_workers: int = 4


@dataclass
class UnifiedSearchResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –µ–¥–∏–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""

    target_name: str
    search_mode: SearchMode

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    best_period: float
    confidence: float
    snr: float
    depth: float
    significance: float

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–∂–∏–º–∞–º
    bls_result: Optional[BLSResult] = None
    ensemble_result: Optional[EnsembleSearchResult] = None

    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    mode_comparison: Optional[Dict] = None

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    processing_time: float
    quality_score: float
    recommendations: List[str]

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        result = {
            "target_name": self.target_name,
            "search_mode": self.search_mode.value,
            "best_period": float(self.best_period),
            "confidence": float(self.confidence),
            "snr": float(self.snr),
            "depth": float(self.depth),
            "significance": float(self.significance),
            "processing_time": float(self.processing_time),
            "quality_score": float(self.quality_score),
            "recommendations": self.recommendations,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã BLS
        if self.bls_result:
            result["bls_result"] = self.bls_result.to_dict()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Ensemble
        if self.ensemble_result:
            result["ensemble_result"] = {
                "consensus_period": self.ensemble_result.consensus_period,
                "consensus_confidence": self.ensemble_result.consensus_confidence,
                "consensus_depth": self.ensemble_result.consensus_depth,
                "consensus_snr": self.ensemble_result.consensus_snr,
                "method_agreement": self.ensemble_result.method_agreement,
                "ensemble_uncertainty": self.ensemble_result.ensemble_uncertainty,
                "planet_candidates": self.ensemble_result.planet_candidates,
                "methods_used": self.ensemble_result.methods_used,
                "habitability_score": self.ensemble_result.habitability_score,
                "false_positive_probability": self.ensemble_result.false_positive_probability,
            }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        if self.mode_comparison:
            result["mode_comparison"] = self.mode_comparison

        return result


class UnifiedSearchService:
    """–ï–¥–∏–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–æ–≤"""

    def __init__(self):
        self.initialized = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.bls_service = BLSService()
        self.ensemble_service = UltimateEnsembleSearchEngine()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_stats = {
            "total_searches": 0,
            "bls_searches": 0,
            "ensemble_searches": 0,
            "hybrid_searches": 0,
            "avg_processing_time": {"bls": 0.0, "ensemble": 0.0, "hybrid": 0.0},
            "success_rates": {"bls": 0.0, "ensemble": 0.0, "hybrid": 0.0},
        }

        # –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_cache = {}

        logger.info("üöÄ Unified Search Service initialized")

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BLS —Å–µ—Ä–≤–∏—Å–∞
            await self.bls_service.initialize()
            logger.info("‚úÖ BLS Service initialized")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ensemble —Å–µ—Ä–≤–∏—Å–∞
            await self.ensemble_service.initialize()
            logger.info("‚úÖ Ensemble Service initialized")

            self.initialized = True
            logger.info("üéâ Unified Search Service READY!")

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Unified Search Service: {e}")
            raise

    async def search(self, request: UnifiedSearchRequest) -> UnifiedSearchResult:
        """
        –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –ü–û–ò–°–ö–ê
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        """
        if not self.initialized:
            raise RuntimeError("Service not initialized")

        start_time = time.time()

        logger.info(f"üîç UNIFIED SEARCH STARTING: {request.target_name}")
        logger.info(f"üéØ Mode: {request.search_mode.value.upper()}")
        logger.info(f"üìä Data: {len(request.time)} points")

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.usage_stats["total_searches"] += 1

            # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
            if request.search_mode == SearchMode.BLS:
                result = await self._run_bls_search(request)
                self.usage_stats["bls_searches"] += 1

            elif request.search_mode == SearchMode.ENSEMBLE:
                result = await self._run_ensemble_search(request)
                self.usage_stats["ensemble_searches"] += 1

            elif request.search_mode == SearchMode.HYBRID:
                result = await self._run_hybrid_search(request)
                self.usage_stats["hybrid_searches"] += 1

            else:
                raise ValueError(f"Unknown search mode: {request.search_mode}")

            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            processing_time = time.time() - start_time
            result.processing_time = processing_time

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await self._update_performance_stats(
                request.search_mode, processing_time, result
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            result.recommendations = await self._generate_recommendations(
                result, request
            )

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cache_key = f"{request.target_name}_{request.search_mode.value}_{hash(str(request.time.tolist()[:10]))}"
            self.result_cache[cache_key] = result

            logger.info(
                f"‚úÖ UNIFIED SEARCH COMPLETED in {processing_time:.2f}s: "
                f"P={result.best_period:.3f}d, SNR={result.snr:.1f}, "
                f"Conf={result.confidence:.3f}"
            )

            return result

        except Exception as e:
            logger.error(f"‚ùå UNIFIED SEARCH FAILED: {e}")
            raise

    async def _run_bls_search(
        self, request: UnifiedSearchRequest
    ) -> UnifiedSearchResult:
        """–ó–∞–ø—É—Å–∫ BLS –ø–æ–∏—Å–∫–∞"""
        logger.info("üîç Running BLS Search...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º BLS –∞–Ω–∞–ª–∏–∑
        bls_result = await self.bls_service.analyze(
            time=request.time,
            flux=request.flux,
            flux_err=request.flux_err,
            period_min=request.period_min,
            period_max=request.period_max,
            snr_threshold=request.snr_threshold,
            target_name=request.target_name,
        )

        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        unified_result = UnifiedSearchResult(
            target_name=request.target_name,
            search_mode=SearchMode.BLS,
            best_period=bls_result.best_period,
            confidence=bls_result.significance,
            snr=bls_result.snr,
            depth=bls_result.depth,
            significance=bls_result.significance,
            bls_result=bls_result,
            processing_time=0.0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
            quality_score=await self._calculate_quality_score(bls_result),
            recommendations=[],
        )

        logger.info(f"‚úÖ BLS Search completed: P={bls_result.best_period:.3f}d")
        return unified_result

    async def _run_ensemble_search(
        self, request: UnifiedSearchRequest
    ) -> UnifiedSearchResult:
        """–ó–∞–ø—É—Å–∫ Ensemble –ø–æ–∏—Å–∫–∞"""
        logger.info("üî• Running ULTIMATE ENSEMBLE Search...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º ensemble –∞–Ω–∞–ª–∏–∑
        ensemble_result = await self.ensemble_service.ultimate_search(
            time=request.time,
            flux=request.flux,
            flux_err=request.flux_err,
            target_name=request.target_name,
            stellar_params=request.stellar_params,
            search_config={
                "period_min": request.period_min,
                "period_max": request.period_max,
            },
        )

        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        unified_result = UnifiedSearchResult(
            target_name=request.target_name,
            search_mode=SearchMode.ENSEMBLE,
            best_period=ensemble_result.consensus_period,
            confidence=ensemble_result.consensus_confidence,
            snr=ensemble_result.consensus_snr,
            depth=ensemble_result.consensus_depth,
            significance=ensemble_result.detection_significance,
            ensemble_result=ensemble_result,
            processing_time=0.0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
            quality_score=await self._calculate_ensemble_quality_score(ensemble_result),
            recommendations=[],
        )

        logger.info(
            f"‚úÖ ENSEMBLE Search completed: P={ensemble_result.consensus_period:.3f}d"
        )
        return unified_result

    async def _run_hybrid_search(
        self, request: UnifiedSearchRequest
    ) -> UnifiedSearchResult:
        """–ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (BLS + Ensemble)"""
        logger.info("üé™ Running HYBRID Search (BLS + ENSEMBLE)...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if request.use_parallel:
            bls_task = asyncio.create_task(
                self._run_bls_search(
                    UnifiedSearchRequest(
                        target_name=request.target_name,
                        time=request.time,
                        flux=request.flux,
                        flux_err=request.flux_err,
                        search_mode=SearchMode.BLS,
                        period_min=request.period_min,
                        period_max=request.period_max,
                        snr_threshold=request.snr_threshold,
                    )
                )
            )

            ensemble_task = asyncio.create_task(
                self._run_ensemble_search(
                    UnifiedSearchRequest(
                        target_name=request.target_name,
                        time=request.time,
                        flux=request.flux,
                        flux_err=request.flux_err,
                        search_mode=SearchMode.ENSEMBLE,
                        period_min=request.period_min,
                        period_max=request.period_max,
                        stellar_params=request.stellar_params,
                        search_config=request.search_config,
                    )
                )
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö
            bls_result, ensemble_result = await asyncio.gather(bls_task, ensemble_task)
        else:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            bls_result = await self._run_bls_search(request)
            ensemble_result = await self._run_ensemble_search(request)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        hybrid_result = await self._combine_hybrid_results(
            bls_result, ensemble_result, request
        )

        logger.info(f"‚úÖ HYBRID Search completed: P={hybrid_result.best_period:.3f}d")
        return hybrid_result

    async def _combine_hybrid_results(
        self,
        bls_result: UnifiedSearchResult,
        ensemble_result: UnifiedSearchResult,
        request: UnifiedSearchRequest,
    ) -> UnifiedSearchResult:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ BLS –∏ Ensemble"""

        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        mode_comparison = await self._compare_results(bls_result, ensemble_result)

        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if mode_comparison["ensemble_advantage"] > 0.2:
            # Ensemble –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ
            best_result = ensemble_result
            chosen_mode = "ensemble"
        elif mode_comparison["bls_advantage"] > 0.2:
            # BLS –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ
            best_result = bls_result
            chosen_mode = "bls"
        else:
            # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ SNR
            if ensemble_result.snr > bls_result.snr:
                best_result = ensemble_result
                chosen_mode = "ensemble"
            else:
                best_result = bls_result
                chosen_mode = "bls"

        # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        hybrid_result = UnifiedSearchResult(
            target_name=request.target_name,
            search_mode=SearchMode.HYBRID,
            best_period=best_result.best_period,
            confidence=best_result.confidence,
            snr=best_result.snr,
            depth=best_result.depth,
            significance=best_result.significance,
            bls_result=bls_result.bls_result,
            ensemble_result=ensemble_result.ensemble_result,
            mode_comparison=mode_comparison,
            processing_time=0.0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
            quality_score=max(bls_result.quality_score, ensemble_result.quality_score),
            recommendations=[],
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ
        mode_comparison["chosen_method"] = chosen_mode
        mode_comparison["choice_reason"] = self._explain_method_choice(
            mode_comparison, chosen_mode
        )

        return hybrid_result

    async def _compare_results(
        self, bls_result: UnifiedSearchResult, ensemble_result: UnifiedSearchResult
    ) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ BLS –∏ Ensemble"""

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        period_diff = abs(bls_result.best_period - ensemble_result.best_period)
        period_agreement = 1.0 - (
            period_diff / max(bls_result.best_period, ensemble_result.best_period)
        )

        snr_ratio = ensemble_result.snr / bls_result.snr if bls_result.snr > 0 else 1.0
        confidence_ratio = (
            ensemble_result.confidence / bls_result.confidence
            if bls_result.confidence > 0
            else 1.0
        )

        # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        ensemble_advantage = (
            (snr_ratio - 1.0) * 0.4
            + (confidence_ratio - 1.0) * 0.3
            + (ensemble_result.quality_score - bls_result.quality_score) * 0.3
        )

        bls_advantage = -ensemble_advantage  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º

        return {
            "period_agreement": float(period_agreement),
            "snr_ratio": float(snr_ratio),
            "confidence_ratio": float(confidence_ratio),
            "ensemble_advantage": float(ensemble_advantage),
            "bls_advantage": float(bls_advantage),
            "bls_metrics": {
                "period": float(bls_result.best_period),
                "snr": float(bls_result.snr),
                "confidence": float(bls_result.confidence),
                "quality": float(bls_result.quality_score),
            },
            "ensemble_metrics": {
                "period": float(ensemble_result.best_period),
                "snr": float(ensemble_result.snr),
                "confidence": float(ensemble_result.confidence),
                "quality": float(ensemble_result.quality_score),
                "methods_used": (
                    len(ensemble_result.ensemble_result.methods_used)
                    if ensemble_result.ensemble_result
                    else 0
                ),
                "method_agreement": (
                    float(ensemble_result.ensemble_result.method_agreement)
                    if ensemble_result.ensemble_result
                    else 0.0
                ),
            },
        }

    def _explain_method_choice(self, comparison: Dict, chosen_method: str) -> str:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞"""
        if chosen_method == "ensemble":
            if comparison["ensemble_advantage"] > 0.3:
                return "Ensemble –ø–æ–∫–∞–∑–∞–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ SNR –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
            elif comparison["snr_ratio"] > 1.5:
                return "Ensemble –æ–±–Ω–∞—Ä—É–∂–∏–ª –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª"
            else:
                return "Ensemble –ø–æ–∫–∞–∑–∞–ª –Ω–µ–º–Ω–æ–≥–æ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        else:
            if comparison["bls_advantage"] > 0.3:
                return "BLS –ø–æ–∫–∞–∑–∞–ª –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            elif comparison["snr_ratio"] < 0.7:
                return "BLS –æ–±–Ω–∞—Ä—É–∂–∏–ª –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª"
            else:
                return "BLS –ø–æ–∫–∞–∑–∞–ª —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –º–µ–Ω—å—à–∏–º–∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏"

    async def _calculate_quality_score(self, bls_result: BLSResult) -> float:
        """–†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è BLS —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        quality_factors = []

        # SNR —Ñ–∞–∫—Ç–æ—Ä
        snr_factor = min(1.0, bls_result.snr / 15.0)
        quality_factors.append(snr_factor * 0.4)

        # Significance —Ñ–∞–∫—Ç–æ—Ä
        sig_factor = bls_result.significance
        quality_factors.append(sig_factor * 0.3)

        # False alarm probability —Ñ–∞–∫—Ç–æ—Ä
        fap_factor = 1.0 - bls_result.false_alarm_probability
        quality_factors.append(fap_factor * 0.2)

        # Depth —Ñ–∞–∫—Ç–æ—Ä
        depth_factor = min(1.0, bls_result.depth * 1000)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥–ª—É–±–∏–Ω—É
        quality_factors.append(depth_factor * 0.1)

        return sum(quality_factors)

    async def _calculate_ensemble_quality_score(
        self, ensemble_result: EnsembleSearchResult
    ) -> float:
        """–†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è Ensemble —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        quality_factors = []

        # SNR —Ñ–∞–∫—Ç–æ—Ä
        snr_factor = min(1.0, ensemble_result.consensus_snr / 15.0)
        quality_factors.append(snr_factor * 0.3)

        # Confidence —Ñ–∞–∫—Ç–æ—Ä
        conf_factor = ensemble_result.consensus_confidence
        quality_factors.append(conf_factor * 0.25)

        # Method agreement —Ñ–∞–∫—Ç–æ—Ä
        agreement_factor = ensemble_result.method_agreement
        quality_factors.append(agreement_factor * 0.2)

        # Bootstrap confidence —Ñ–∞–∫—Ç–æ—Ä
        bootstrap_factor = ensemble_result.bootstrap_confidence
        quality_factors.append(bootstrap_factor * 0.15)

        # False positive —Ñ–∞–∫—Ç–æ—Ä
        fp_factor = 1.0 - ensemble_result.false_positive_probability
        quality_factors.append(fp_factor * 0.1)

        return sum(quality_factors)

    async def _generate_recommendations(
        self, result: UnifiedSearchResult, request: UnifiedSearchRequest
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–∞
        if result.snr < 7:
            recommendations.append(
                "–ù–∏–∑–∫–∏–π SNR - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è"
            )
        elif result.snr > 15:
            recommendations.append("–í—ã—Å–æ–∫–∏–π SNR - —Å–∏–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –ø–æ–∏—Å–∫–∞
        if request.search_mode == SearchMode.BLS and result.confidence < 0.7:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é Ensemble –ø–æ–∏—Å–∫–∞")
        elif request.search_mode == SearchMode.ENSEMBLE and result.ensemble_result:
            if result.ensemble_result.method_agreement < 0.6:
                recommendations.append(
                    "–ù–∏–∑–∫–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
                )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if result.best_period < 1.0:
            recommendations.append("–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –∞–ª–∏–∞—Å—ã")
        elif result.best_period > 30.0:
            recommendations.append(
                "–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–ª—É–±–∏–Ω–µ
        if result.depth < 0.001:
            recommendations.append("–ú–∞–ª–∞—è –≥–ª—É–±–∏–Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞ - –≤–æ–∑–º–æ–∂–µ–Ω –ª–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
        elif result.depth > 0.1:
            recommendations.append(
                "–ì–ª—É–±–æ–∫–∏–π —Ç—Ä–∞–Ω–∑–∏—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –∑–∞—Ç–º–µ–≤–∞—é—â–∏–µ –¥–≤–æ–π–Ω—ã–µ"
            )

        return recommendations

    async def _update_performance_stats(
        self, mode: SearchMode, processing_time: float, result: UnifiedSearchResult
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        mode_str = mode.value

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        current_avg = self.usage_stats["avg_processing_time"][mode_str]
        count = self.usage_stats[f"{mode_str}_searches"]

        if count > 1:
            new_avg = ((current_avg * (count - 1)) + processing_time) / count
        else:
            new_avg = processing_time

        self.usage_stats["avg_processing_time"][mode_str] = new_avg

        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞)
        success = 1.0 if result.quality_score > 0.5 else 0.0
        current_success = self.usage_stats["success_rates"][mode_str]

        if count > 1:
            new_success = ((current_success * (count - 1)) + success) / count
        else:
            new_success = success

        self.usage_stats["success_rates"][mode_str] = new_success

    async def get_service_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "initialized": self.initialized,
            "bls_service_status": await self.bls_service.get_status(),
            "ensemble_service_available": self.ensemble_service.initialized,
            "usage_statistics": self.usage_stats,
            "cache_size": len(self.result_cache),
        }

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            await self.bls_service.cleanup()
            # Ensemble service cleanup –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥
            if hasattr(self.ensemble_service, "cleanup"):
                await self.ensemble_service.cleanup()

            logger.info("‚úÖ Unified Search Service cleaned up")
        except Exception as e:
            logger.error(f"‚ùå Cleanup failed: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
unified_search_service = UnifiedSearchService()
