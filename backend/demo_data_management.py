#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ ExoplanetAI
Comprehensive Data Management System Demo for ExoplanetAI

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–≥–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö NASA/MAST/ExoFOP
2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
3. –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Git
4. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞
5. –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import asyncio
import json
import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

import aiohttp
import pandas as pd
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich.panel import Panel
from rich import print as rprint

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

console = Console()

class DataManagementDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self, base_url: str = "http://localhost:8001"):
        self.base_url = base_url
        self.session: Optional[aiohttp.ClientSession] = None
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def check_system_health(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        console.print("üîç [bold blue]–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...[/bold blue]")
        
        try:
            async with self.session.get(f"{self.base_url}/health") as response:
                health_data = await response.json()
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞
                table = Table(title="–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ExoplanetAI")
                table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
                table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
                table.add_column("–î–µ—Ç–∞–ª–∏", style="yellow")
                
                overall_status = health_data.get("status", "unknown")
                table.add_row("–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å", overall_status, f"v{health_data.get('version', 'unknown')}")
                
                components = health_data.get("components", {})
                for comp_name, comp_data in components.items():
                    status = comp_data.get("status", "unknown")
                    details = []
                    
                    if comp_name == "data_sources":
                        details.append(f"{comp_data.get('initialized', 0)}/{comp_data.get('total', 0)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                    elif comp_name == "cache":
                        redis_status = "Redis –ø–æ–¥–∫–ª—é—á–µ–Ω" if comp_data.get("redis_connected") else "Fallback –∫—ç—à"
                        details.append(redis_status)
                    
                    table.add_row(comp_name.replace("_", " ").title(), status, ", ".join(details))
                
                console.print(table)
                return health_data
                
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}[/bold red]")
            return {}
    
    async def test_data_ingestion(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≥–µ—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        console.print("\nüì• [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≥–µ—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...[/bold blue]")
        
        # –¢–µ—Å—Ç 1: –ò–Ω–≥–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞–Ω–µ—Ç
        console.print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≥–µ—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞–Ω–µ—Ç...")
        
        table_request = {
            "source": "nasa",
            "table_name": "confirmed_planets",
            "filters": {
                "pl_name": "Kepler-452b"
            },
            "max_records": 10
        }
        
        try:
            async with self.session.post(
                f"{self.base_url}/api/v1/api/v1/data/ingest/table",
                json=table_request
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    console.print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {result.get('records_ingested', 0)} –∑–∞–ø–∏—Å–µ–π")
                    console.print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {result.get('storage_path', 'N/A')}")
                else:
                    error_text = await response.text()
                    console.print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≥–µ—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            console.print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–≥–µ—Å—Ç–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return False
        
        # –¢–µ—Å—Ç 2: –ò–Ω–≥–µ—Å—Ç –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞
        console.print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≥–µ—Å—Ç–∞ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞...")
        
        lightcurve_request = {
            "target": "TOI-715",
            "mission": "TESS",
            "sector": 1,
            "download_dir": "data/lightcurves/demo"
        }
        
        try:
            async with self.session.post(
                f"{self.base_url}/api/v1/api/v1/data/ingest/lightcurve",
                json=lightcurve_request
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    console.print(f"‚úÖ –ö—Ä–∏–≤–∞—è –±–ª–µ—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {result.get('file_path', 'N/A')}")
                    console.print(f"üìä –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {result.get('data_points', 0)}")
                else:
                    error_text = await response.text()
                    console.print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≥–µ—Å—Ç–∞ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            console.print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–≥–µ—Å—Ç–µ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞: {e}")
            return False
            
        return True
    
    async def test_data_validation(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        console.print("\nüîç [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...[/bold blue]")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        test_data = {
            "data_type": "planet_table",
            "data": {
                "pl_name": ["Test Planet 1", "Test Planet 2"],
                "pl_orbper": [365.25, -10.5],  # –í—Ç–æ—Ä–æ–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - –æ—à–∏–±–∫–∞
                "pl_rade": [1.0, 1000.0],      # –í—Ç–æ—Ä–æ–π —Ä–∞–¥–∏—É—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                "ra": [180.0, 360.1],          # –í—Ç–æ—Ä–æ–µ RA –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - –æ—à–∏–±–∫–∞
                "dec": [45.0, 91.0]            # –í—Ç–æ—Ä–æ–µ DEC –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - –æ—à–∏–±–∫–∞
            },
            "validation_rules": {
                "check_physical_constraints": True,
                "check_coordinate_ranges": True,
                "check_duplicates": True
            }
        }
        
        try:
            async with self.session.post(
                f"{self.base_url}/api/v1/api/v1/data/validate",
                json=test_data
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    validation_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                    validation_table.add_column("–¢–∏–ø", style="cyan")
                    validation_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="yellow")
                    validation_table.add_column("–î–µ—Ç–∞–ª–∏", style="white")
                    
                    validation_table.add_row(
                        "–û—à–∏–±–∫–∏", 
                        str(len(result.get("errors", []))),
                        "; ".join(result.get("errors", [])[:3])
                    )
                    validation_table.add_row(
                        "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", 
                        str(len(result.get("warnings", []))),
                        "; ".join(result.get("warnings", [])[:3])
                    )
                    validation_table.add_row(
                        "–í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏", 
                        str(result.get("valid_records", 0)),
                        f"–∏–∑ {result.get('total_records', 0)} –æ–±—â–∏—Ö"
                    )
                    
                    console.print(validation_table)
                    
                    if result.get("is_valid", False):
                        console.print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                    else:
                        console.print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏")
                    
                    return True
                else:
                    error_text = await response.text()
                    console.print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            console.print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    async def test_preprocessing(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞"""
        console.print("\n‚öôÔ∏è [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞...[/bold blue]")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫—Ä–∏–≤—É—é –±–ª–µ—Å–∫–∞
        preprocessing_request = {
            "lightcurve_data": {
                "time": list(range(100)),
                "flux": [1.0 + 0.01 * (i % 10) for i in range(100)],  # –ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è
                "flux_err": [0.001] * 100
            },
            "preprocessing_params": {
                "remove_outliers": True,
                "sigma_clip_sigma": 3.0,
                "baseline_window_length": 21,
                "wavelet_denoising": True,
                "wavelet_type": "db4",
                "normalize_method": "median"
            }
        }
        
        try:
            async with self.session.post(
                f"{self.base_url}/api/v1/api/v1/data/preprocess/lightcurve",
                json=preprocessing_request
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
                    preprocessing_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    preprocessing_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
                    preprocessing_table.add_column("–î–æ", style="yellow")
                    preprocessing_table.add_column("–ü–æ—Å–ª–µ", style="green")
                    
                    stats = result.get("processing_stats", {})
                    preprocessing_table.add_row(
                        "–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö",
                        str(stats.get("original_points", 0)),
                        str(stats.get("processed_points", 0))
                    )
                    preprocessing_table.add_row(
                        "–í—ã–±—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã",
                        "-",
                        str(stats.get("outliers_removed", 0))
                    )
                    preprocessing_table.add_row(
                        "RMS —à—É–º–∞",
                        f"{stats.get('original_rms', 0):.6f}",
                        f"{stats.get('processed_rms', 0):.6f}"
                    )
                    
                    console.print(preprocessing_table)
                    
                    console.print(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.get('processing_time_ms', 0):.1f} –º—Å")
                    console.print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result.get('output_path', 'N/A')}")
                    
                    return True
                else:
                    error_text = await response.text()
                    console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            console.print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return False
    
    async def test_versioning(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        console.print("\nüìù [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...[/bold blue]")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        version_request = {
            "version_name": f"demo_v{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö",
            "include_patterns": ["*.csv", "*.fits"],
            "metadata": {
                "created_by": "demo_script",
                "purpose": "testing",
                "data_sources": ["nasa", "tess"]
            }
        }
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
            async with self.session.post(
                f"{self.base_url}/api/v1/api/v1/data/version/create",
                json=version_request
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    console.print(f"‚úÖ –í–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {result.get('version_name', 'N/A')}")
                    console.print(f"üîó Commit hash: {result.get('commit_hash', 'N/A')}")
                else:
                    error_text = await response.text()
                    console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {response.status} - {error_text}")
                    return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π
            async with self.session.get(
                f"{self.base_url}/api/v1/api/v1/data/version/list"
            ) as response:
                if response.status == 200:
                    versions = await response.json()
                    
                    if versions.get("versions"):
                        version_table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                        version_table.add_column("–í–µ—Ä—Å–∏—è", style="cyan")
                        version_table.add_column("–î–∞—Ç–∞", style="yellow")
                        version_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
                        
                        for version in versions["versions"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                            version_table.add_row(
                                version.get("name", "N/A"),
                                version.get("created_at", "N/A"),
                                version.get("description", "N/A")[:50] + "..." if len(version.get("description", "")) > 50 else version.get("description", "N/A")
                            )
                        
                        console.print(version_table)
                    else:
                        console.print("üìù –í–µ—Ä—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
                    
                    return True
                else:
                    error_text = await response.text()
                    console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            console.print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–µ—Ä—Å–∏—è–º–∏: {e}")
            return False
    
    async def test_storage_stats(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        console.print("\nüíæ [bold blue]–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...[/bold blue]")
        
        try:
            async with self.session.get(
                f"{self.base_url}/api/v1/api/v1/data/storage/stats"
            ) as response:
                if response.status == 200:
                    stats = await response.json()
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                    storage_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
                    storage_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
                    storage_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
                    
                    storage_stats = stats.get("storage_stats", {})
                    storage_table.add_row("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{storage_stats.get('total_size_mb', 0):.2f} MB")
                    storage_table.add_row("–§–∞–π–ª–æ–≤", str(storage_stats.get("total_files", 0)))
                    storage_table.add_row("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", str(storage_stats.get("total_directories", 0)))
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
                    data_types = storage_stats.get("by_data_type", {})
                    for data_type, type_stats in data_types.items():
                        storage_table.add_row(
                            f"  {data_type}",
                            f"{type_stats.get('files', 0)} —Ñ–∞–π–ª–æ–≤, {type_stats.get('size_mb', 0):.2f} MB"
                        )
                    
                    console.print(storage_table)
                    
                    return True
                else:
                    error_text = await response.text()
                    console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            console.print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    async def run_full_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        console.print(Panel.fit(
            "[bold green]üåü –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò EXOPLANETAI üåü[/bold green]\n"
            "[yellow]Comprehensive Data Management System Demo[/yellow]",
            border_style="green"
        ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        health = await self.check_system_health()
        if not health or health.get("status") != "healthy":
            console.print("‚ùå [bold red]–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏[/bold red]")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        tests = [
            ("–ò–Ω–≥–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö", self.test_data_ingestion),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", self.test_data_validation),
            ("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞", self.test_preprocessing),
            ("–í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", self.test_versioning),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", self.test_storage_stats)
        ]
        
        results = {}
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            for test_name, test_func in tests:
                task = progress.add_task(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {test_name}", total=None)
                
                try:
                    result = await test_func()
                    results[test_name] = result
                    
                    if result:
                        progress.update(task, description=f"‚úÖ {test_name}")
                    else:
                        progress.update(task, description=f"‚ùå {test_name}")
                        
                except Exception as e:
                    console.print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
                    results[test_name] = False
                    progress.update(task, description=f"‚ùå {test_name}")
                
                progress.remove_task(task)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.print("\n" + "="*60)
        console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò[/bold blue]")
        console.print("="*60)
        
        success_count = sum(1 for result in results.values() if result)
        total_count = len(results)
        
        result_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
        result_table.add_column("–¢–µ—Å—Ç", style="cyan")
        result_table.add_column("–†–µ–∑—É–ª—å—Ç–∞—Ç", style="white")
        
        for test_name, result in results.items():
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result else "‚ùå –û—à–∏–±–∫–∞"
            result_table.add_row(test_name, status)
        
        console.print(result_table)
        
        if success_count == total_count:
            console.print(f"\nüéâ [bold green]–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! ({success_count}/{total_count})[/bold green]")
            console.print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        else:
            console.print(f"\n‚ö†Ô∏è [bold yellow]–ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ[/bold yellow]")
        
        console.print("\nüìö [bold blue]–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:[/bold blue]")
        console.print(f"   üåê {self.base_url}/docs")
        
        return success_count == total_count


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "http://localhost:8001"
    
    console.print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {base_url}")
    
    async with DataManagementDemo(base_url) as demo:
        success = await demo.run_full_demo()
        
        if success:
            console.print("\nüéØ [bold green]–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]")
            return 0
        else:
            console.print("\nüí• [bold red]–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏[/bold red]")
            return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        console.print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        console.print(f"\nüí• [bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
        sys.exit(1)
