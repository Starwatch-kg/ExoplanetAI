#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ ExoplanetAI
Working Data Management System Demo for ExoplanetAI

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–≥–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö NASA/MAST/ExoFOP
2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö  
3. –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Git
4. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞
5. –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import asyncio
import json
import logging
import numpy as np
import pandas as pd
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
from ingest.data_manager import DataManager
from ingest.storage import StorageManager
from ingest.validator import DataValidator
from ingest.versioning import VersionManager
from preprocessing.lightcurve_processor import LightCurveProcessor
from data_sources.base import LightCurveData
from core.config import get_settings

console = Console()
logger = logging.getLogger(__name__)

class WorkingDataDemo:
    """–†–∞–±–æ—á–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self):
        self.settings = get_settings()
        
    async def test_configuration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        console.print("üîß [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...[/bold blue]")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            config_table = Table(title="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö")
            config_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
            config_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
            
            config_table.add_row("–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–∞–Ω–Ω—ã—Ö", str(self.settings.data.data_path))
            config_table.add_row("–ü—É—Ç—å —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö", str(self.settings.data.raw_data_path))
            config_table.add_row("–ü—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", str(self.settings.data.processed_data_path))
            config_table.add_row("–ü—É—Ç—å –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞", str(self.settings.data.lightcurves_path))
            config_table.add_row("–í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", str(self.settings.data.enable_versioning))
            config_table.add_row("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", f"{self.settings.data.max_storage_gb} GB")
            
            console.print(config_table)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            paths_to_check = [
                self.settings.data.data_path,
                self.settings.data.raw_data_path,
                self.settings.data.processed_data_path,
                self.settings.data.lightcurves_path,
            ]
            
            paths_table = Table(title="–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
            paths_table.add_column("–ü—É—Ç—å", style="cyan")
            paths_table.add_column("–°—É—â–µ—Å—Ç–≤—É–µ—Ç", style="green")
            paths_table.add_column("–†–∞–∑–º–µ—Ä", style="yellow")
            
            for path_str in paths_to_check:
                path = Path(path_str)
                exists = "‚úÖ" if path.exists() else "‚ùå"
                
                if path.exists():
                    try:
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        total_size = sum(f.stat().st_size for f in path.rglob('*') if f.is_file())
                        size_str = f"{total_size / 1024 / 1024:.2f} MB"
                    except:
                        size_str = "N/A"
                else:
                    size_str = "N/A"
                
                paths_table.add_row(str(path), exists, size_str)
            
            console.print(paths_table)
            
            return True
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/bold red]")
            return False
    
    async def test_storage_manager(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StorageManager"""
        console.print("\nüíæ [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StorageManager...[/bold blue]")
        
        try:
            storage = StorageManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            init_result = await storage.initialize()
            console.print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if init_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_df = pd.DataFrame({
                'pl_name': ['Test Planet 1', 'Test Planet 2', 'Test Planet 3'],
                'pl_orbper': [365.25, 687.0, 225.0],
                'pl_rade': [1.0, 1.5, 0.8],
                'ra': [180.0, 200.0, 160.0],
                'dec': [45.0, -30.0, 60.0]
            })
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
            save_path = await storage.save_raw_table(test_df, "demo", "test_planets.csv")
            console.print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ‚úÖ –£—Å–ø–µ—à–Ω–æ -> {save_path}")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            cache_key = "test_cache_key"
            cache_data = {
                "test_key": "test_value",
                "timestamp": datetime.now().isoformat(),
                "data": [1, 2, 3, 4, 5]
            }
            
            await storage.cache_table(cache_key, cache_data, ttl=3600)
            console.print("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cached_result = await storage.get_cached_table(cache_key)
            if cached_result and cached_result.get("test_key") == "test_value":
                console.print("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞: ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                console.print("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞: ‚ùå –û—à–∏–±–∫–∞")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            stats = await storage.get_storage_stats()
            if stats:
                stats_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
                stats_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
                stats_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
                
                stats_table.add_row("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{stats.get('total_size_mb', 0):.2f} MB")
                stats_table.add_row("–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤", str(stats.get('total_files', 0)))
                stats_table.add_row("–í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", str(stats.get('total_directories', 0)))
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
                by_type = stats.get('by_data_type', {})
                for data_type, type_stats in by_type.items():
                    stats_table.add_row(
                        f"  {data_type}",
                        f"{type_stats.get('files', 0)} —Ñ–∞–π–ª–æ–≤, {type_stats.get('size_mb', 0):.2f} MB"
                    )
                
                console.print(stats_table)
            
            await storage.cleanup()
            return True
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ StorageManager: {e}[/bold red]")
            return False
    
    async def test_validator(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataValidator"""
        console.print("\nüîç [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataValidator...[/bold blue]")
        
        try:
            validator = DataValidator()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏
            test_df = pd.DataFrame({
                'pl_name': ['Valid Planet', 'Invalid Planet', 'Another Planet'],
                'pl_orbper': [365.25, -10.0, 687.0],  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –æ—à–∏–±–∫–∞
                'pl_rade': [1.0, 1000.0, 1.5],        # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                'ra': [180.0, 400.0, 200.0],          # RA –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - –æ—à–∏–±–∫–∞
                'dec': [45.0, 95.0, -30.0]            # DEC –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - –æ—à–∏–±–∫–∞
            })
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            validation_result = await validator.validate_dataframe(
                test_df, 
                data_type="exoplanet_table",
                validation_rules={
                    "check_physical_constraints": True,
                    "check_coordinate_ranges": True,
                    "check_duplicates": True,
                    "check_required_columns": True
                }
            )
            
            validation_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            validation_table.add_column("–¢–∏–ø", style="cyan")
            validation_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="yellow")
            validation_table.add_column("–ü—Ä–∏–º–µ—Ä—ã", style="white")
            
            errors = validation_result.get("errors", [])
            warnings = validation_result.get("warnings", [])
            
            validation_table.add_row(
                "–û—à–∏–±–∫–∏", 
                str(len(errors)),
                "; ".join(errors[:2]) if errors else "–ù–µ—Ç"
            )
            validation_table.add_row(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", 
                str(len(warnings)),
                "; ".join(warnings[:2]) if warnings else "–ù–µ—Ç"
            )
            validation_table.add_row(
                "–í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏", 
                str(validation_result.get("valid_records", 0)),
                f"–∏–∑ {validation_result.get('total_records', 0)} –æ–±—â–∏—Ö"
            )
            
            console.print(validation_table)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞—à–µ–ª –æ—à–∏–±–∫–∏
            if len(errors) > 0:
                console.print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
                return True
            else:
                console.print("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å)")
                return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ DataValidator: {e}[/bold red]")
            return False
    
    async def test_version_manager(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VersionManager"""
        console.print("\nüìù [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VersionManager...[/bold blue]")
        
        try:
            version_manager = VersionManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            init_result = await version_manager.initialize()
            console.print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if init_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            test_files = []
            data_path = Path(self.settings.data.data_path)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_file = data_path / "test_version_file.json"
            test_data = {
                "version": "1.0",
                "created_at": datetime.now().isoformat(),
                "test_data": [1, 2, 3, 4, 5]
            }
            
            with open(test_file, 'w') as f:
                json.dump(test_data, f, indent=2)
            test_files.append(test_file)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
            version_name = f"demo_test_v{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            version_metadata = {
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
                "created_by": "working_demo",
                "purpose": "testing",
                "components": ["storage", "validator"]
            }
            
            create_result = await version_manager.create_version(
                version_name, 
                test_files,
                version_metadata
            )
            
            if create_result.get("success"):
                console.print(f"‚úÖ –í–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {version_name}")
                console.print(f"üîó Commit: {create_result.get('commit_hash', 'N/A')[:8]}...")
            else:
                console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {create_result.get('error', 'Unknown')}")
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π
            versions = await version_manager.list_versions()
            if versions:
                versions_table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏")
                versions_table.add_column("–í–µ—Ä—Å–∏—è", style="cyan")
                versions_table.add_column("–î–∞—Ç–∞", style="yellow")
                versions_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
                
                for version in versions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    desc = version.get("description", "N/A")
                    if len(desc) > 40:
                        desc = desc[:40] + "..."
                    
                    versions_table.add_row(
                        version.get("name", "N/A"),
                        version.get("created_at", "N/A")[:19] if version.get("created_at") else "N/A",
                        desc
                    )
                
                console.print(versions_table)
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            for test_file in test_files:
                if test_file.exists():
                    test_file.unlink()
            
            return True
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ VersionManager: {e}[/bold red]")
            return False
    
    async def test_lightcurve_processor(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LightCurveProcessor"""
        console.print("\n‚öôÔ∏è [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LightCurveProcessor...[/bold blue]")
        
        try:
            processor = LightCurveProcessor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫—Ä–∏–≤—É—é –±–ª–µ—Å–∫–∞
            time_points = np.linspace(0, 10, 1000)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª + —à—É–º + –≤—ã–±—Ä–æ—Å—ã
            flux = 1.0 + 0.01 * np.sin(2 * np.pi * time_points) + 0.005 * np.random.normal(size=1000)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–±—Ä–æ—Å–æ–≤
            flux[100] = 1.1  # –í—ã–±—Ä–æ—Å
            flux[500] = 0.8  # –í—ã–±—Ä–æ—Å
            flux_err = np.full_like(flux, 0.005)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç LightCurveData
            test_lightcurve = LightCurveData(
                target_name="Test Target",
                mission="TEST",
                time=time_points,
                flux=flux,
                flux_err=flux_err,
                quality=np.zeros_like(time_points, dtype=int),
                metadata={
                    "sector": 1,
                    "camera": 1,
                    "ccd": 1
                }
            )
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_params = {
                "remove_outliers": True,
                "sigma_clip_sigma": 3.0,
                "baseline_window_length": 51,
                "normalize_method": "median",
                "wavelet_denoising": False
            }
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            result = await processor.process_lightcurve(test_lightcurve, processing_params)
            
            if result.get("success"):
                stats = result.get("processing_stats", {})
                
                processing_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏")
                processing_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
                processing_table.add_column("–î–æ", style="yellow")
                processing_table.add_column("–ü–æ—Å–ª–µ", style="green")
                
                processing_table.add_row(
                    "–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö",
                    str(stats.get("original_points", 0)),
                    str(stats.get("processed_points", 0))
                )
                processing_table.add_row(
                    "–í—ã–±—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã",
                    "-",
                    str(stats.get("outliers_removed", 0))
                )
                processing_table.add_row(
                    "RMS —à—É–º–∞",
                    f"{stats.get('original_rms', 0):.6f}",
                    f"{stats.get('processed_rms', 0):.6f}"
                )
                
                console.print(processing_table)
                console.print(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.get('processing_time_ms', 0):.1f} –º—Å")
                
                return True
            else:
                console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', 'Unknown')}")
                return False
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ LightCurveProcessor: {e}[/bold red]")
            return False
    
    async def test_data_manager(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataManager (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç)"""
        console.print("\nüéØ [bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataManager (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)...[/bold blue]")
        
        try:
            data_manager = DataManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            init_result = await data_manager.initialize()
            console.print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataManager: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if init_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            if not init_result:
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            system_stats = await data_manager.get_system_stats()
            
            if system_stats:
                stats_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏")
                stats_table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
                stats_table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
                stats_table.add_column("–î–µ—Ç–∞–ª–∏", style="yellow")
                
                for component, details in system_stats.items():
                    if isinstance(details, dict):
                        status = details.get("status", "unknown")
                        info = details.get("info", "N/A")
                        stats_table.add_row(component, status, str(info))
                    else:
                        stats_table.add_row(component, "active", str(details))
                
                console.print(stats_table)
            
            await data_manager.cleanup()
            return True
            
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ DataManager: {e}[/bold red]")
            return False
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        console.print(Panel.fit(
            "[bold green]üåü –†–ê–ë–û–ß–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò üåü[/bold green]\n"
            "[yellow]Working Data Management System Demo[/yellow]\n\n"
            "[white]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ ExoplanetAI[/white]",
            border_style="green"
        ))
        
        tests = [
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", self.test_configuration),
            ("StorageManager", self.test_storage_manager),
            ("DataValidator", self.test_validator),
            ("VersionManager", self.test_version_manager),
            ("LightCurveProcessor", self.test_lightcurve_processor),
            ("DataManager (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)", self.test_data_manager)
        ]
        
        results = {}
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            for test_name, test_func in tests:
                task = progress.add_task(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {test_name}", total=None)
                
                try:
                    result = await test_func()
                    results[test_name] = result
                    
                    if result:
                        progress.update(task, description=f"‚úÖ {test_name}")
                    else:
                        progress.update(task, description=f"‚ùå {test_name}")
                        
                except Exception as e:
                    console.print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
                    results[test_name] = False
                    progress.update(task, description=f"‚ùå {test_name}")
                
                progress.remove_task(task)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.print("\n" + "="*70)
        console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò[/bold blue]")
        console.print("="*70)
        
        success_count = sum(1 for result in results.values() if result)
        total_count = len(results)
        
        result_table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
        result_table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
        result_table.add_column("–†–µ–∑—É–ª—å—Ç–∞—Ç", style="white")
        result_table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
        
        for test_name, result in results.items():
            status_icon = "‚úÖ" if result else "‚ùå"
            status_text = "–£—Å–ø–µ—à–Ω–æ" if result else "–û—à–∏–±–∫–∞"
            result_table.add_row(test_name, status_text, status_icon)
        
        console.print(result_table)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        success_rate = (success_count / total_count) * 100
        
        if success_count == total_count:
            console.print(f"\nüéâ [bold green]–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! ({success_count}/{total_count})[/bold green]")
            console.print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
            grade = "A+"
        elif success_rate >= 80:
            console.print(f"\nüéØ [bold green]–û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)[/bold green]")
            grade = "A"
        elif success_rate >= 60:
            console.print(f"\nüëç [bold yellow]–•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)[/bold yellow]")
            grade = "B"
        else:
            console.print(f"\n‚ö†Ô∏è [bold red]–¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)[/bold red]")
            grade = "C"
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        console.print(f"\nüìã [bold blue]–§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê: {grade}[/bold blue]")
        
        summary_table = Table(title="–°–≤–æ–¥–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã")
        summary_table.add_column("–§—É–Ω–∫—Ü–∏—è", style="cyan")
        summary_table.add_column("–°—Ç–∞—Ç—É—Å", style="white")
        
        summary_table.add_row("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if results.get("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã") else "‚ùå –û—à–∏–±–∫–∞")
        summary_table.add_row("üíæ –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if results.get("StorageManager") else "‚ùå –û—à–∏–±–∫–∞")
        summary_table.add_row("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if results.get("DataValidator") else "‚ùå –û—à–∏–±–∫–∞")
        summary_table.add_row("üìù –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if results.get("VersionManager") else "‚ùå –û—à–∏–±–∫–∞")
        summary_table.add_row("‚öôÔ∏è –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–≤—ã—Ö –±–ª–µ—Å–∫–∞", "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if results.get("LightCurveProcessor") else "‚ùå –û—à–∏–±–∫–∞")
        summary_table.add_row("üéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if results.get("DataManager (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)") else "‚ùå –û—à–∏–±–∫–∞")
        
        console.print(summary_table)
        
        console.print(f"\nüìö [bold blue]–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ API:[/bold blue]")
        console.print("   üåê Swagger UI: http://localhost:8001/docs")
        console.print("   üìä –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:8001/metrics")
        console.print("   üîç Health Check: http://localhost:8001/health")
        
        return success_count == total_count


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print("üöÄ [bold green]–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ ExoplanetAI[/bold green]")
    
    demo = WorkingDataDemo()
    success = await demo.run_demo()
    
    if success:
        console.print("\nüéØ [bold green]–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]")
        console.print("üåü –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ ExoplanetAI –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return 0
    else:
        console.print("\nüí° [bold yellow]–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —É—Å–ø–µ—Ö–æ–º[/bold yellow]")
        console.print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return 0  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        exit(exit_code)
    except KeyboardInterrupt:
        console.print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        console.print(f"\nüí• [bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
        exit(1)
