#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""
import requests
import json
import time

def test_api():
    base_url = "http://localhost:8000"
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    try:
        print("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/health...")
        response = requests.get(f"{base_url}/api/health", timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print(f"   ‚úÖ Health OK: {response.json()}")
        else:
            print(f"   ‚ùå Health failed: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Health error: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS endpoint
    try:
        print("2. –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/test-cors...")
        response = requests.get(f"{base_url}/api/test-cors", timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print(f"   ‚úÖ CORS OK: {response.json()}")
        else:
            print(f"   ‚ùå CORS failed: {response.text}")
    except Exception as e:
        print(f"   ‚ùå CORS error: {e}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
    try:
        print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/search...")
        test_data = {
            "target_name": "167692429",
            "catalog": "TIC",
            "mission": "TESS",
            "period_min": 0.5,
            "period_max": 20.0,
            "duration_min": 0.05,
            "duration_max": 0.3,
            "snr_threshold": 7.0
        }
        
        response = requests.post(
            f"{base_url}/api/search", 
            json=test_data,
            timeout=30,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Search OK: –Ω–∞–π–¥–µ–Ω–æ {len(result.get('candidates', []))} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        else:
            print(f"   ‚ùå Search failed: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå Search error: {e}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –ø–æ–∏—Å–∫
    try:
        print("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/ai-search...")
        response = requests.post(
            f"{base_url}/api/ai-search", 
            json=test_data,
            timeout=30,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ AI Search OK: –Ω–∞–π–¥–µ–Ω–æ {len(result.get('candidates', []))} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            if result.get('ai_analysis'):
                print(f"   ü§ñ AI –∞–Ω–∞–ª–∏–∑: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {result['ai_analysis'].get('confidence', 0):.3f}")
        else:
            print(f"   ‚ùå AI Search failed: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå AI Search error: {e}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º NASA Data Browser
    try:
        print("5. –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/nasa-data...")
        response = requests.get(
            f"{base_url}/api/nasa-data/441420236?catalog=TIC&mission=TESS",
            timeout=30
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ NASA Data OK: {result.get('data_source', 'Unknown')}")
            if result.get('confirmed_planets'):
                print(f"   ü™ê –ù–∞–π–¥–µ–Ω–æ {len(result['confirmed_planets'])} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç")
        else:
            print(f"   ‚ùå NASA Data failed: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå NASA Data error: {e}")
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
    try:
        print("6. –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/confirmed-planets...")
        response = requests.get(
            f"{base_url}/api/confirmed-planets/441420236",
            timeout=30
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Confirmed Planets OK: –Ω–∞–π–¥–µ–Ω–æ {result.get('count', 0)} –ø–ª–∞–Ω–µ—Ç")
        else:
            print(f"   ‚ùå Confirmed Planets failed: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå Confirmed Planets error: {e}")
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
    try:
        print("7. –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/catalogs...")
        response = requests.get(f"{base_url}/api/catalogs", timeout=10)
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Catalogs OK: {len(result.get('catalogs', []))} –∫–∞—Ç–∞–ª–æ–≥–æ–≤")
        else:
            print(f"   ‚ùå Catalogs failed: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå Catalogs error: {e}")
    
    # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞
    try:
        print("8. –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/lightcurve...")
        response = requests.get(
            f"{base_url}/api/lightcurve/441420236?mission=TESS",
            timeout=30
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Lightcurve OK: {len(result.get('time', []))} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print(f"   ‚ùå Lightcurve failed: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå Lightcurve error: {e}")
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_enhanced_detector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        import subprocess
        import sys
        
        result = subprocess.run([
            sys.executable, "test_enhanced_detector.py"
        ], capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            print("‚úÖ –£—Å–∏–ª–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            lines = result.stdout.split('\n')
            for line in lines[-10:]:
                if line.strip():
                    print(f"   {line}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —É—Å–∏–ª–µ–Ω–Ω–æ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä–µ:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–µ—Å—Ç —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")

if __name__ == "__main__":
    test_api()
    test_enhanced_detector()
