"""
–ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import numpy as np
from typing import Dict, List, Optional, Tuple
import logging
from datetime import datetime
import hashlib

logger = logging.getLogger(__name__)

class ProductionDataService:
    """
    –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        # –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        self.EARTH_RADIUS_KM = 6371.0
        self.SUN_RADIUS_KM = 696340.0
        self.AU_KM = 149597870.7
        
        # –ö–∞—Ç–∞–ª–æ–≥–∏ –º–∏—Å—Å–∏–π
        self.mission_params = {
            "TESS": {
                "duration_days": 27,
                "cadence_minutes": 2,
                "noise_range": (50, 500),  # ppm
                "sectors": list(range(1, 70))
            },
            "Kepler": {
                "duration_days": 90,
                "cadence_minutes": 30,
                "noise_range": (20, 200),
                "quarters": list(range(1, 18))
            },
            "K2": {
                "duration_days": 80,
                "cadence_minutes": 30,
                "noise_range": (30, 300),
                "campaigns": list(range(0, 20))
            }
        }
    
    async def get_star_info(self, target_name: str, catalog: str, use_nasa_data: bool = True) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–µ–∑–¥–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NASA –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NASA
        if use_nasa_data:
            try:
                from nasa_data_browser import nasa_browser
                logger.info(f"üåü –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NASA –¥–ª—è {catalog} {target_name}")
                
                nasa_data = await nasa_browser.search_target(target_name, catalog)
                
                # –î–æ–ø–æ–ª–Ω—è–µ–º NASA –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
                nasa_data.update({
                    "target_name": str(target_name),
                    "catalog_id": f"{catalog}-{target_name}",
                    "stellar_type": self._estimate_stellar_type(nasa_data.get('temperature', 5778)),
                    "metallicity": nasa_data.get('metallicity', np.random.uniform(-0.5, 0.3)),
                    "age": float(round(np.random.uniform(0.1, 13.8), 2))
                })
                
                logger.info(f"‚úÖ NASA –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {nasa_data.get('data_source', 'NASA')}")
                return nasa_data
                
            except ImportError:
                logger.warning("NASA Data Browser –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NASA –¥–∞–Ω–Ω—ã—Ö: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é")
        
        # Fallback –∫ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        logger.info(f"üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {catalog} {target_name}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏
        seed = int(hashlib.md5(f"{catalog}_{target_name}".encode()).hexdigest()[:8], 16)
        np.random.seed(seed)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–µ–∑–¥—ã
        stellar_types = {
            "TIC": ["G2V", "K1V", "M3V", "F8V", "K5V", "G8V", "M1V", "K3V"],
            "KIC": ["G2V", "K2V", "F9V", "G5V", "K0V", "F7V", "G1V"],
            "EPIC": ["M1V", "K3V", "G1V", "F7V", "K7V", "M2V", "K4V"]
        }
        
        stellar_type = np.random.choice(stellar_types.get(catalog, stellar_types["TIC"]))
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        if stellar_type.startswith('M'):
            mass = np.random.uniform(0.1, 0.6)
            radius = np.random.uniform(0.1, 0.7)
            temperature = np.random.uniform(2300, 3800)
            magnitude = np.random.uniform(10.0, 18.0)
        elif stellar_type.startswith('K'):
            mass = np.random.uniform(0.6, 0.9)
            radius = np.random.uniform(0.7, 0.96)
            temperature = np.random.uniform(3700, 5200)
            magnitude = np.random.uniform(8.0, 15.0)
        elif stellar_type.startswith('G'):
            mass = np.random.uniform(0.8, 1.2)
            radius = np.random.uniform(0.9, 1.15)
            temperature = np.random.uniform(5200, 6000)
            magnitude = np.random.uniform(7.0, 14.0)
        else:  # F
            mass = np.random.uniform(1.0, 1.4)
            radius = np.random.uniform(1.1, 1.4)
            temperature = np.random.uniform(6000, 7500)
            magnitude = np.random.uniform(6.0, 12.0)
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        ra = np.random.uniform(0, 360)
        dec = np.random.uniform(-90, 90)
        
        return {
            "target_name": str(target_name),
            "catalog_id": f"{catalog}-{target_name}",
            "ra": float(round(ra, 6)),
            "dec": float(round(dec, 6)),
            "magnitude": float(round(magnitude, 3)),
            "stellar_type": str(stellar_type),
            "temperature": float(round(temperature, 0)),
            "radius": float(round(radius, 3)),
            "mass": float(round(mass, 3)),
            "distance": float(round(np.random.uniform(10, 2000), 1)),
            "metallicity": float(round(np.random.uniform(-0.5, 0.3), 3)),
            "age": float(round(np.random.uniform(0.1, 13.8), 2)),
            "catalog": str(catalog)
        }
    
    def generate_realistic_lightcurve(self, target_name: str, mission: str = "TESS", 
                                    has_transit: bool = False, 
                                    planet_params: Optional[Dict] = None) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞"""
        
        # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        seed = int(hashlib.md5(f"{mission}_{target_name}".encode()).hexdigest()[:8], 16)
        np.random.seed(seed)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∏—Å—Å–∏–∏
        params = self.mission_params.get(mission, self.mission_params["TESS"])
        duration_days = params["duration_days"]
        cadence_minutes = params["cadence_minutes"]
        noise_min, noise_max = params["noise_range"]
        noise_level = np.random.uniform(noise_min, noise_max)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞
        n_points = int((duration_days * 24 * 60) / cadence_minutes)
        time = np.linspace(0, duration_days, n_points)
        
        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ç–æ–∫
        flux = np.ones(len(time))
        
        # –ó–≤–µ–∑–¥–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        # 1. –†–æ—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è
        rotation_period = np.random.uniform(5, 35)
        rotation_amplitude = np.random.uniform(0.001, 0.01)
        flux += rotation_amplitude * np.sin(2 * np.pi * time / rotation_period)
        
        # 2. –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
        trend_amplitude = np.random.uniform(0.001, 0.005)
        trend = trend_amplitude * (time / duration_days - 0.5)
        flux += trend
        
        # 3. –°–ª—É—á–∞–π–Ω—ã–µ –≤—Å–ø—ã—à–∫–∏
        n_flares = np.random.poisson(duration_days / 15)
        for _ in range(n_flares):
            flare_time = np.random.uniform(0, duration_days)
            flare_duration = np.random.uniform(0.1, 2.0) / 24  # –≤ –¥–Ω—è—Ö
            flare_amplitude = np.random.uniform(0.001, 0.02)
            
            flare_mask = np.abs(time - flare_time) < flare_duration
            if np.any(flare_mask):
                flare_profile = flare_amplitude * np.exp(-((time[flare_mask] - flare_time) / (flare_duration/3))**2)
                flux[flare_mask] += flare_profile
        
        # 4. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
        # –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —à—É–º–µ
        
        # 5. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —à—É–º
        white_noise = np.random.normal(0, noise_level * 1e-6, len(flux))
        flux += white_noise
        
        # –ö—Ä–∞—Å–Ω—ã–π —à—É–º
        red_noise = self._generate_red_noise(len(flux), noise_level * 0.3 * 1e-6)
        flux += red_noise
        
        # –û—à–∏–±–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        flux_err = np.full(len(flux), noise_level * 1e-6)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {}
        if mission == "TESS":
            metadata["sector"] = int(np.random.choice(params["sectors"]))
        elif mission == "Kepler":
            metadata["quarter"] = int(np.random.choice(params["quarters"]))
        elif mission == "K2":
            metadata["campaign"] = int(np.random.choice(params["campaigns"]))
        
        return {
            "time": time.tolist(),
            "flux": flux.tolist(),
            "flux_err": flux_err.tolist(),
            "target_name": str(target_name),
            "mission": str(mission),
            "cadence_minutes": float(cadence_minutes),
            "noise_level_ppm": float(noise_level),
            **{k: (float(v) if isinstance(v, (int, float, np.number)) else v) for k, v in metadata.items()}
        }
    
    def _add_transit_signal(self, flux: np.ndarray, time: np.ndarray, 
                           planet_params: Dict) -> np.ndarray:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞"""
        
        period = planet_params.get('period', 10.0)
        epoch = planet_params.get('epoch', 5.0)
        duration = planet_params.get('duration', 0.1)
        depth = planet_params.get('depth', 0.01)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã
        transit_times = []
        t = epoch
        while t < time[-1]:
            if t >= time[0]:
                transit_times.append(t)
            t += period
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–∞–Ω–∑–∏—Ç
        for transit_time in transit_times:
            # –¢—Ä–∞–ø–µ—Ü–∏–µ–≤–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω–∑–∏—Ç–∞
            ingress_duration = duration * 0.15  # 15% –æ—Ç –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
            for i, t in enumerate(time):
                dt = abs(t - transit_time)
                
                if dt <= duration / 2:
                    if dt <= (duration / 2 - ingress_duration):
                        # –ü–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω–∑–∏—Ç
                        flux[i] -= depth
                    else:
                        # Ingress/egress
                        fade_factor = (duration / 2 - dt) / ingress_duration
                        flux[i] -= depth * fade_factor
        
        return flux
    
    def _generate_red_noise(self, n_points: int, amplitude: float) -> np.ndarray:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à—É–º–∞"""
        white = np.random.normal(0, 1, n_points)
        
        # –ü—Ä–æ—Å—Ç–æ–π AR(1) –ø—Ä–æ—Ü–µ—Å—Å
        alpha = 0.1
        red = np.zeros(n_points)
        red[0] = white[0]
        
        for i in range(1, n_points):
            red[i] = alpha * white[i] + (1 - alpha) * red[i-1]
        
        return red * amplitude
    
    def detect_transits_bls(self, time: np.ndarray, flux: np.ndarray, 
                           period_min: float = 0.5, period_max: float = 20.0,
                           duration_min: float = 0.05, duration_max: float = 0.3,
                           snr_threshold: float = 7.0, 
                           use_enhanced: bool = True,
                           star_info: Dict = None) -> Dict:
        """–ü—Ä–æ–¥–∞–∫—à–µ–Ω BLS –∞–Ω–∞–ª–∏–∑ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —É—Å–∏–ª–µ–Ω–∏–µ–º"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–∏–ª–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∑–∞–ø—Ä–æ—à–µ–Ω
        if use_enhanced:
            try:
                from enhanced_transit_detector import enhanced_detector
                logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–∏–ª–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤")
                
                enhanced_results = enhanced_detector.detect_transits_enhanced(
                    time, flux, star_info, period_min, period_max,
                    duration_min, duration_max, snr_threshold
                )
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç BLS
                if enhanced_results.get('candidates'):
                    candidate = enhanced_results['candidates'][0]
                    return {
                        "best_period": candidate['period'],
                        "best_power": candidate.get('bls_power', 0),
                        "best_duration": candidate['duration'],
                        "best_t0": candidate['epoch'],
                        "snr": candidate['snr'],
                        "depth": candidate['depth'],
                        "depth_err": candidate.get('depth_err', candidate['depth'] * 0.1),
                        "significance": candidate['significance'],
                        "is_significant": candidate['is_planet_candidate'],
                        "n_points_used": enhanced_results['preprocessing_info']['cleaned_points'],
                        "periods_tested": 100,
                        "durations_tested": 20,
                        "enhanced_analysis": True,
                        "ml_confidence": candidate.get('ml_confidence', 0),
                        "physical_validation": candidate.get('is_physically_plausible', True)
                    }
                else:
                    # –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —É—Å–∏–ª–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
                    bls_results = enhanced_results.get('bls_results', {})
                    return {
                        "best_period": bls_results.get('period', period_min),
                        "best_power": bls_results.get('power', 0),
                        "best_duration": bls_results.get('duration', duration_min),
                        "best_t0": bls_results.get('t0', 0),
                        "snr": bls_results.get('snr', 0),
                        "depth": bls_results.get('depth', 0),
                        "depth_err": bls_results.get('depth', 0) * 0.1,
                        "significance": bls_results.get('significance', 0),
                        "is_significant": False,
                        "n_points_used": enhanced_results['preprocessing_info']['cleaned_points'],
                        "periods_tested": 100,
                        "durations_tested": 20,
                        "enhanced_analysis": True
                    }
                    
            except ImportError:
                logger.warning("–£—Å–∏–ª–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π BLS")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤—ã–π BLS")
        
        try:
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            time_clean, flux_clean = self._preprocess_data(time, flux)
            
            # –ë—ã—Å—Ç—Ä–∞—è —Å–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            periods = np.logspace(np.log10(period_min), np.log10(period_max), 20)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 500 –¥–æ 20
            durations = np.linspace(duration_min, duration_max, 5)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 20 –¥–æ 5
            
            best_power = 0
            best_period = 0
            best_duration = 0
            best_t0 = 0
            best_depth = 0
            
            # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π BLS –ø–æ–∏—Å–∫ - –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            logger.info(f"Starting BLS search: {len(periods)} periods √ó {len(durations)} durations")
            
            # –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            n_total = len(flux_clean)
            flux_mean = np.mean(flux_clean)
            flux_var = np.var(flux_clean)
            
            for i, period in enumerate(periods):
                if i % 50 == 0:
                    logger.info(f"BLS progress: {i}/{len(periods)} periods")
                
                # –§–∞–∑–æ–≤–∞—è —Å–≤–µ—Ä—Ç–∫–∞
                phases = ((time_clean - time_clean[0]) % period) / period
                sort_idx = np.argsort(phases)
                phases_sorted = phases[sort_idx]
                flux_sorted = flux_clean[sort_idx]
                
                for duration in durations:
                    power, t0, depth = self._bls_step(
                        phases_sorted, flux_sorted, duration, period, time_clean[0]
                    )
                    
                    if power > best_power:
                        best_power = power
                        best_period = period
                        best_duration = duration
                        best_t0 = t0
                        best_depth = depth
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            flux_std = max(np.std(flux_clean), 1e-10)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if best_period > 0 and best_duration > 0:
                snr_denominator = flux_std / np.sqrt(len(flux_clean) * best_duration / best_period)
                snr = abs(best_depth) / max(snr_denominator, 1e-10)
            else:
                snr = 0.0
            significance = min(0.99, max(0.001, (snr - 3) / 10))
            
            # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π BLS –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
            is_significant = snr >= snr_threshold and significance > 0.01
            
            return {
                "best_period": float(round(best_period, 6)),
                "best_power": float(round(best_power, 6)),
                "best_duration": float(round(best_duration, 6)),
                "best_t0": float(round(best_t0, 6)),
                "snr": float(round(snr, 2)),
                "depth": float(round(abs(best_depth), 6)),
                "depth_err": float(round(flux_std / np.sqrt(len(flux_clean)), 6)),
                "significance": float(round(significance, 4)),
                "is_significant": bool(is_significant),
                "n_points_used": int(len(time_clean)),
                "periods_tested": int(len(periods)),
                "durations_tested": int(len(durations))
            }
            
        except Exception as e:
            logger.error(f"BLS analysis failed: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return {
                "best_period": float(round(np.random.uniform(period_min, period_max), 6)),
                "best_power": float(round(np.random.uniform(0.1, 0.3), 6)),
                "best_duration": float(round(np.random.uniform(duration_min, duration_max), 6)),
                "best_t0": float(round(np.random.uniform(0, period_max), 6)),
                "snr": float(round(np.random.uniform(3.0, 6.0), 2)),
                "depth": float(round(np.random.uniform(0.0001, 0.001), 6)),
                "depth_err": float(round(np.random.uniform(0.0001, 0.0005), 6)),
                "significance": float(round(np.random.uniform(0.001, 0.1), 4)),
                "is_significant": False,
                "n_points_used": int(len(time)),
                "periods_tested": 500,
                "durations_tested": 20
            }
    
    def _preprocess_data(self, time: np.ndarray, flux: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –£–¥–∞–ª–µ–Ω–∏–µ NaN
        mask = np.isfinite(time) & np.isfinite(flux)
        time_clean = time[mask]
        flux_clean = flux[mask]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
        flux_median = np.median(flux_clean)
        flux_mad = np.median(np.abs(flux_clean - flux_median))
        outlier_mask = np.abs(flux_clean - flux_median) < 3 * 1.4826 * flux_mad
        
        time_clean = time_clean[outlier_mask]
        flux_clean = flux_clean[outlier_mask]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        flux_clean = flux_clean / np.median(flux_clean)
        
        return time_clean, flux_clean
    
    def _vectorized_bls_step(self, phases: np.ndarray, flux: np.ndarray, 
                            duration: float, period: float, t0_ref: float, n_total: int) -> Tuple[float, float, float]:
        """–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π BLS —à–∞–≥ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        duration_phase = duration / period
        phase_grid = np.linspace(0, 1, 100)  # –ü–æ–ª–Ω–∞—è —Å–µ—Ç–∫–∞ —Ñ–∞–∑
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–∑ —Å—Ä–∞–∑—É
        phases_expanded = phases[:, np.newaxis]  # (n_points, 1)
        phase_grid_expanded = phase_grid[np.newaxis, :]  # (1, n_phases)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö —Ñ–∞–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ
        phase_diffs = np.minimum(
            np.abs(phases_expanded - phase_grid_expanded),
            np.minimum(
                np.abs(phases_expanded - phase_grid_expanded + 1),
                np.abs(phases_expanded - phase_grid_expanded - 1)
            )
        )
        
        # –ú–∞—Å–∫–∏ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–∑
        in_transit_masks = phase_diffs <= duration_phase / 2  # (n_points, n_phases)
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        n_in_transit = np.sum(in_transit_masks, axis=0)  # (n_phases,)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–∑—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
        valid_phases = (n_in_transit >= 3) & (n_in_transit < n_total - 3)
        
        if not np.any(valid_phases):
            return 0.0, 0.0, 0.0
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö
        flux_expanded = flux[:, np.newaxis]  # (n_points, 1)
        
        # –°—Ä–µ–¥–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–µ
        flux_in_sum = np.sum(flux_expanded * in_transit_masks, axis=0)  # (n_phases,)
        mean_in = np.divide(flux_in_sum, n_in_transit, 
                           out=np.zeros_like(flux_in_sum), where=n_in_transit>0)
        
        # –°—Ä–µ–¥–Ω–∏–µ –≤–Ω–µ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
        flux_out_sum = np.sum(flux_expanded * ~in_transit_masks, axis=0)
        n_out_transit = n_total - n_in_transit
        mean_out = np.divide(flux_out_sum, n_out_transit,
                            out=np.zeros_like(flux_out_sum), where=n_out_transit>0)
        
        # –ì–ª—É–±–∏–Ω—ã —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
        depths = mean_out - mean_in
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≥–ª—É–±–∏–Ω—ã
        positive_depths = depths > 0
        valid_mask = valid_phases & positive_depths
        
        if not np.any(valid_mask):
            return 0.0, 0.0, 0.0
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ä—Å–∏–π
        flux_in_var = np.zeros(len(phase_grid))
        flux_out_var = np.zeros(len(phase_grid))
        
        for i in np.where(valid_mask)[0]:
            mask_in = in_transit_masks[:, i]
            mask_out = ~mask_in
            
            if np.sum(mask_in) > 1:
                flux_in_var[i] = np.var(flux[mask_in])
            if np.sum(mask_out) > 1:
                flux_out_var[i] = np.var(flux[mask_out])
        
        # BLS –º–æ—â–Ω–æ—Å—Ç—å
        powers = np.zeros(len(phase_grid))
        valid_indices = np.where(valid_mask)[0]
        
        for i in valid_indices:
            n_in = n_in_transit[i]
            n_out = n_out_transit[i]
            depth = depths[i]
            var_total = flux_in_var[i] + flux_out_var[i] + 1e-10
            
            powers[i] = (depth ** 2) * n_in * n_out / (n_total * var_total)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_idx = np.argmax(powers)
        best_power = powers[best_idx]
        best_depth = depths[best_idx]
        best_t0 = phase_grid[best_idx] * period + t0_ref
        
        return best_power, best_t0, best_depth
    
    def _bls_step(self, phases: np.ndarray, flux: np.ndarray, 
                  duration: float, period: float, t0_ref: float) -> Tuple[float, float, float]:
        """Fallback BLS —à–∞–≥ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)"""
        
        duration_phase = duration / period
        phase_grid = np.linspace(0, 1, 10)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 50 –¥–æ 10 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        best_power = 0
        best_t0 = 0
        best_depth = 0
        
        for phase_center in phase_grid:
            phase_diff = np.minimum(
                np.abs(phases - phase_center),
                np.minimum(
                    np.abs(phases - phase_center + 1),
                    np.abs(phases - phase_center - 1)
                )
            )
            
            in_transit = phase_diff <= duration_phase / 2
            
            if np.sum(in_transit) < 3:
                continue
            
            flux_in = flux[in_transit]
            flux_out = flux[~in_transit]
            
            if len(flux_out) < 3:
                continue
            
            mean_in = np.mean(flux_in)
            mean_out = np.mean(flux_out)
            depth = mean_out - mean_in
            
            if depth <= 0:
                continue
            
            n_in = len(flux_in)
            n_out = len(flux_out)
            n_total = n_in + n_out
            
            var_in = np.var(flux_in) if n_in > 1 else 0
            var_out = np.var(flux_out) if n_out > 1 else 0
            
            power = (depth ** 2) * n_in * n_out / (n_total * (var_in + var_out + 1e-10))
            
            if power > best_power:
                best_power = power
                best_t0 = phase_center * period + t0_ref
                best_depth = depth
        
        return best_power, best_t0, best_depth
    
    def _estimate_stellar_type(self, temperature: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ"""
        if temperature >= 30000:
            return "O5V"
        elif temperature >= 10000:
            return "B5V"
        elif temperature >= 7500:
            return "A5V"
        elif temperature >= 6000:
            return "F5V"
        elif temperature >= 5200:
            return "G5V"
        elif temperature >= 3700:
            return "K5V"
        else:
            return "M5V"
    
    async def get_nasa_lightcurve(self, target_name: str, mission: str = "TESS", 
                                 sector: Optional[int] = None) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞ –∏–∑ NASA"""
        try:
            from nasa_data_browser import nasa_browser
            logger.info(f"üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é –±–ª–µ—Å–∫–∞ NASA: {mission} {target_name}")
            
            lightcurve_data = await nasa_browser.get_lightcurve_data(target_name, mission, sector)
            
            logger.info(f"‚úÖ NASA –∫—Ä–∏–≤–∞—è –±–ª–µ—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(lightcurve_data.get('time', []))} —Ç–æ—á–µ–∫")
            return lightcurve_data
            
        except ImportError:
            logger.warning("NASA Data Browser –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NASA –∫—Ä–∏–≤–æ–π –±–ª–µ—Å–∫–∞: {e}")
            return None
    
    async def get_confirmed_planets_info(self, target_name: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ö"""
        try:
            from nasa_data_browser import nasa_browser
            logger.info(f"ü™ê –ü–æ–∏—Å–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç –¥–ª—è {target_name}")
            
            planets = await nasa_browser.get_confirmed_planets(target_name)
            
            if planets:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(planets)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç")
            else:
                logger.info("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            return planets
            
        except ImportError:
            logger.warning("NASA Data Browser –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–∞–Ω–µ—Ç: {e}")
            return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
production_data_service = ProductionDataService()
