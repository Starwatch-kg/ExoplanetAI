#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""

import numpy as np
from preprocess import create_synthetic_data
from pipeline import BoxLeastSquares
from utils import calculate_metrics

def test_synthetic_mode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print("üß™ –¢–ï–°–¢ –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ñ–ò–ú–ê")
    print("="*50)
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    test_data, test_labels = create_synthetic_data(
        num_samples=100,
        length=2000,
        transit_fraction=0.3
    )
    print(f"   –°–æ–∑–¥–∞–Ω–æ {len(test_data)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"   –° —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º–∏: {np.sum(test_labels)}")
    print(f"   –ë–µ–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤: {len(test_labels) - np.sum(test_labels)}")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö TIC ID
    test_tic_ids = [f"TIC_TEST_{i:06d}" for i in range(len(test_data))]
    print(f"   –°–æ–∑–¥–∞–Ω–æ {len(test_tic_ids)} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö TIC ID")
    
    # 3. –¢–µ—Å—Ç BLS –∞–Ω–∞–ª–∏–∑–∞
    print("\n2. –¢–µ—Å—Ç BLS –∞–Ω–∞–ª–∏–∑–∞...")
    bls_analyzer = BoxLeastSquares()
    
    candidates = []
    all_predictions = []
    all_scores = []
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 10 –æ–±—Ä–∞–∑—Ü–æ–≤
    for i in range(min(10, len(test_data))):
        data = test_data[i]
        label = test_labels[i]
        tic_id = test_tic_ids[i]
        
        times = np.linspace(0, 30, len(data))
        bls_results = bls_analyzer.compute_periodogram(times, data)
        
        if bls_results and bls_results['best_power'] > 1000:
            candidate = {
                'tic_id': tic_id,
                'period': bls_results['best_period'],
                'depth': 0.01,
                'confidence': min(bls_results['best_power'] / 10000, 1.0),
                'method': 'BLS',
                'bls_power': bls_results['best_power']
            }
            candidates.append(candidate)
            all_predictions.append(1)
            print(f"   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ {tic_id}: –ø–µ—Ä–∏–æ–¥={bls_results['best_period']:.2f}, –º–æ—â–Ω–æ—Å—Ç—å={bls_results['best_power']:.0f}")
        else:
            all_predictions.append(0)
            print(f"   ‚ö™ –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ {tic_id}")
        
        score = bls_results['best_power'] if bls_results else 0
        all_scores.append(score)
    
    # 4. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    print("\n3. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")
    metrics = calculate_metrics(
        test_labels[:len(all_predictions)], 
        np.array(all_predictions), 
        np.array(all_scores)
    )
    
    print(f"   Precision: {metrics['precision']:.3f}")
    print(f"   Recall: {metrics['recall']:.3f}")
    print(f"   F1-Score: {metrics['f1_score']:.3f}")
    print(f"   Accuracy: {metrics['accuracy']:.3f}")
    
    # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*50)
    print(f"‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(test_data)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"‚úÖ –§–∏–∫—Ç–∏–≤–Ω—ã–µ TIC ID: {len(test_tic_ids)}")
    print(f"‚úÖ BLS –∞–Ω–∞–ª–∏–∑: {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
    print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏: –≤—ã—á–∏—Å–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("\nüéâ –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö TESS —Ä–µ—à–µ–Ω–∞.")

if __name__ == "__main__":
    test_synthetic_mode()
