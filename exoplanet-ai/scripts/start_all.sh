#!/bin/bash

# ExoplanetAI Startup Script
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ ExoplanetAI

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ ExoplanetAI..."
echo "========================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[$1]${NC} $2"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "README.md" ]; then
    print_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# Activate virtual environment
if [ -d "venv" ]; then
    print_status "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    source venv/bin/activate
    print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
else
    print_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π Python"
fi

# Function to check if a process is running
is_running() {
    pgrep -f "$1" > /dev/null
}

# Function to kill a process
kill_process() {
    pkill -f "$1" 2>/dev/null || true
}

# Stop any existing processes
print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
kill_process "uvicorn.*main:app"
kill_process "npm.*run.*dev"
print_success "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# Start backend in background
print_status "–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞..."
cd Exoplanet_AI/exoplanet-ai/backend
nohup uvicorn main:app --host 0.0.0.0 --port 8001 --reload > ../../logs/backend.log 2>&1 &
BACKEND_PID=$!
cd ../..

# Wait a moment for backend to start
sleep 3

# Check if backend started successfully
if is_running "uvicorn.*main:app"; then
    print_success "Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $BACKEND_PID)"
else
    print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend —Å–µ—Ä–≤–µ—Ä"
    exit 1
fi

# Start frontend in background (if npm is available)
print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è npm –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend..."
if command -v npm >/dev/null 2>&1; then
    if [ -d "Exoplanet_AI/exoplanet-ai/frontend" ]; then
        print_status "–ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞..."
        cd Exoplanet_AI/exoplanet-ai/frontend
        nohup npm run dev > ../../logs/frontend.log 2>&1 &
        FRONTEND_PID=$!
        cd ../..
        
        # Wait a moment for frontend to start
        sleep 3
        
        # Check if frontend started successfully
        if is_running "npm.*run.*dev"; then
            print_success "Frontend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $FRONTEND_PID)"
        else
            print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å frontend —Å–µ—Ä–≤–µ—Ä"
            print_warning "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å frontend –≤—Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é Docker:"
            print_warning "  docker-compose up -d"
        fi
    else
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        print_warning "–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ backend"
    fi
else
    print_warning "npm –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ backend"
    print_warning "–í—ã –º–æ–∂–µ—Ç–µ:"
    print_warning "  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node.js –∏ npm –≤—Ä—É—á–Ω—É—é"
    print_warning "  2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend:"
    print_warning "     docker-compose up -d"
    print_warning "  3. –†–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å API backend"
fi

print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
echo ""
echo "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
echo "  üåê Frontend: http://localhost:5173 (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)"
echo "  üîß Backend API: http://localhost:8001/api/v1"
echo "  ü©∫ Health Check: http://localhost:8001/health"
echo ""
echo "–ï—Å–ª–∏ frontend –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ:"
echo "  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node.js –∏ npm –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç"
echo "  2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker: docker-compose up -d"
echo "  3. –†–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å API backend"
echo ""
echo "–õ–æ–≥–∏:"
echo "  üìÑ Backend: logs/backend.log"
if command -v npm >/dev/null 2>&1 && [ -d "Exoplanet_AI/exoplanet-ai/frontend" ]; then
    echo "  üìÑ Frontend: logs/frontend.log"
fi
echo ""
echo "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./scripts/stop_all.sh"

# Function to cleanup on exit
cleanup() {
    echo ""
    print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    kill_process "uvicorn.*main:app"
    kill_process "npm.*run.*dev"
    print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    exit 0
}

# Trap SIGINT and SIGTERM
trap cleanup SIGINT SIGTERM

# Keep script running
while true; do
    sleep 1
done