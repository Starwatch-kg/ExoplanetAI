#!/usr/bin/env python3
"""
üß™ –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç Exoplanet AI
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import time
import json
from typing import Dict, Any, Optional
import sys

class ExoplanetSystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Exoplanet AI"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.timeout = 30
        self.results = {}
    
    def print_status(self, message: str, status: str = "INFO"):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å —Ü–≤–µ—Ç–∞–º–∏"""
        colors = {
            "INFO": "\033[94m",      # –°–∏–Ω–∏–π
            "SUCCESS": "\033[92m",   # –ó–µ–ª–µ–Ω—ã–π
            "WARNING": "\033[93m",   # –ñ–µ–ª—Ç—ã–π
            "ERROR": "\033[91m",     # –ö—Ä–∞—Å–Ω—ã–π
            "RESET": "\033[0m"       # –°–±—Ä–æ—Å
        }
        
        color = colors.get(status, colors["INFO"])
        reset = colors["RESET"]
        
        icons = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå"
        }
        
        icon = icons.get(status, "‚ÑπÔ∏è")
        print(f"{color}{icon} {message}{reset}")
    
    def test_endpoint(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ endpoint"""
        url = f"{self.base_url}{endpoint}"
        
        try:
            start_time = time.time()
            
            if method.upper() == "GET":
                response = self.session.get(url)
            elif method.upper() == "POST":
                response = self.session.post(url, json=data)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            
            end_time = time.time()
            response_time = end_time - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                json_data = response.json()
            except ValueError:
                json_data = {"raw_response": response.text}
            
            return {
                "success": True,
                "status_code": response.status_code,
                "response_time": response_time,
                "data": json_data,
                "error": None
            }
            
        except requests.exceptions.ConnectionError:
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
                "status_code": None,
                "response_time": None,
                "data": None
            }
        except requests.exceptions.Timeout:
            return {
                "success": False,
                "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
                "status_code": None,
                "response_time": None,
                "data": None
            }
        except requests.exceptions.HTTPError as e:
            return {
                "success": False,
                "error": f"HTTP –æ—à–∏–±–∫–∞: {e}",
                "status_code": response.status_code,
                "response_time": response_time,
                "data": None
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}",
                "status_code": None,
                "response_time": None,
                "data": None
            }
    
    def test_basic_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö endpoints"""
        self.print_status("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö endpoints", "INFO")
        
        tests = [
            ("GET", "/", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
            ("GET", "/health", "Health check"),
            ("GET", "/api/nasa/stats", "NASA —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ]
        
        for method, endpoint, description in tests:
            result = self.test_endpoint(method, endpoint)
            self.results[endpoint] = result
            
            if result["success"]:
                self.print_status(
                    f"{description}: {result['response_time']:.3f}s", 
                    "SUCCESS"
                )
            else:
                self.print_status(
                    f"{description}: {result['error']}", 
                    "ERROR"
                )
    
    def test_data_loading(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.print_status("üõ∞Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö TESS", "INFO")
        
        test_data = {
            "tic_id": "261136679",
            "sectors": [1, 2]
        }
        
        result = self.test_endpoint("POST", "/load-tic", test_data)
        self.results["/load-tic"] = result
        
        if result["success"]:
            data = result["data"]
            if data.get("success") and "data" in data:
                lightcurve = data["data"]
                points = len(lightcurve.get("times", []))
                self.print_status(
                    f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {points} —Ç–æ—á–µ–∫ –∑–∞ {result['response_time']:.3f}s", 
                    "SUCCESS"
                )
                return lightcurve
            else:
                self.print_status("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", "WARNING")
                return None
        else:
            self.print_status(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {result['error']}", "ERROR")
            return None
    
    def test_analysis(self, lightcurve_data: Optional[Dict] = None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        self.print_status("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç", "INFO")
        
        if not lightcurve_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            lightcurve_data = {
                "tic_id": "TEST",
                "times": [0.0, 0.1, 0.2, 0.3, 0.4, 0.5],
                "fluxes": [1.0, 0.99, 0.98, 0.99, 1.0, 0.99]
            }
        
        analysis_request = {
            "lightcurve_data": lightcurve_data,
            "model_type": "simple",
            "parameters": {"threshold": 0.01}
        }
        
        result = self.test_endpoint("POST", "/analyze", analysis_request)
        self.results["/analyze"] = result
        
        if result["success"]:
            data = result["data"]
            if data.get("success"):
                candidates = data.get("candidates", [])
                processing_time = data.get("processing_time", 0)
                self.print_status(
                    f"–ê–Ω–∞–ª–∏–∑: {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞ {processing_time:.3f}s", 
                    "SUCCESS"
                )
                return data
            else:
                error_msg = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                self.print_status(f"–ê–Ω–∞–ª–∏–∑: {error_msg}", "WARNING")
                return None
        else:
            self.print_status(f"–ê–Ω–∞–ª–∏–∑: {result['error']}", "ERROR")
            return None
    
    def test_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.print_status("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "INFO")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        times = []
        for i in range(5):
            result = self.test_endpoint("GET", "/health")
            if result["success"]:
                times.append(result["response_time"])
        
        if times:
            avg_time = sum(times) / len(times)
            min_time = min(times)
            max_time = max(times)
            
            self.print_status(
                f"Health endpoint: avg={avg_time:.3f}s, min={min_time:.3f}s, max={max_time:.3f}s",
                "SUCCESS" if avg_time < 1.0 else "WARNING"
            )
        else:
            self.print_status("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "ERROR")
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_status("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞", "INFO")
        print("=" * 60)
        
        # 1. –ë–∞–∑–æ–≤—ã–µ endpoints
        self.test_basic_endpoints()
        print()
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        lightcurve = self.test_data_loading()
        print()
        
        # 3. –ê–Ω–∞–ª–∏–∑
        analysis_result = self.test_analysis(lightcurve)
        print()
        
        # 4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.test_performance()
        print()
        
        # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_report()
    
    def print_report(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_status("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç", "INFO")
        print("=" * 60)
        
        total_tests = len(self.results)
        successful_tests = sum(1 for r in self.results.values() if r["success"])
        
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
        for endpoint, result in self.results.items():
            status = "‚úÖ" if result["success"] else "‚ùå"
            time_info = f" ({result['response_time']:.3f}s)" if result["response_time"] else ""
            error_info = f" - {result['error']}" if result["error"] else ""
            
            print(f"{status} {endpoint}{time_info}{error_info}")
        
        print("=" * 60)
        
        if success_rate >= 80:
            self.print_status("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!", "SUCCESS")
        elif success_rate >= 60:
            self.print_status("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏", "WARNING")
        else:
            self.print_status("‚ùå –°–∏—Å—Ç–µ–º–∞ –∏–º–µ–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", "ERROR")
            return 1
        
        return 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåå Exoplanet AI - –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    base_url = "http://localhost:8000"
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    
    print(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º: {base_url}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester = ExoplanetSystemTester(base_url)
    exit_code = tester.run_full_test()
    
    sys.exit(exit_code)

if __name__ == "__main__":
    main()
