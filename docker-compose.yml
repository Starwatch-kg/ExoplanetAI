version: '3.8'

services:
  # Main application
  app:
    build: .
    container_name: exoplanet-ai-app
    ports:
      - "80:80"
      - "8001:8001"
    volumes:
      - ./logs:/app/logs
      - ./temp_data:/app/temp_data
      - ./ml_models:/app/ml_models
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=sqlite:///./exoplanet_ai.db
      - REDIS_URL=redis://redis:6379/0
      - ENABLE_AI_FEATURES=true
      - LOG_LEVEL=INFO
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: exoplanet-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL database (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: exoplanet-ai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=exoplanet_ai
      - POSTGRES_USER=exoplanet
      - POSTGRES_PASSWORD=exoplanet2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U exoplanet -d exoplanet_ai"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: exoplanet-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: exoplanet-ai-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
  postgres_data:
  grafana_data:

networks:
  default:
    name: exoplanet-ai-network
