"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç.
"""

import numpy as np
from preprocess import create_synthetic_data
from utils import BoxLeastSquares, calculate_metrics
import matplotlib.pyplot as plt

def test_synthetic_pipeline():
    """–¢–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–ï–°–¢ –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    data, labels = create_synthetic_data(
        num_samples=50,
        length=1000,
        transit_fraction=0.4
    )
    
    print(f"   –°–æ–∑–¥–∞–Ω–æ {len(data)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"   –° —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º–∏: {np.sum(labels)}")
    print(f"   –ë–µ–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤: {len(labels) - np.sum(labels)}")
    
    # 2. –¢–µ—Å—Ç BLS
    print("\n2. –¢–µ—Å—Ç Box Least Squares...")
    bls = BoxLeastSquares(period_range=(1.0, 20.0), nperiods=100)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞–∑—Ü–µ —Å —Ç—Ä–∞–Ω–∑–∏—Ç–æ–º
    transit_indices = np.where(labels == 1)[0]
    if len(transit_indices) > 0:
        test_idx = transit_indices[0]
        test_data = data[test_idx]
        times = np.linspace(0, 30, len(test_data))
        
        print(f"   –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑—Ü–∞ {test_idx} (—Å —Ç—Ä–∞–Ω–∑–∏—Ç–æ–º)")
        bls_results = bls.compute_periodogram(times, test_data)
        
        print(f"   –õ—É—á—à–∏–π –ø–µ—Ä–∏–æ–¥: {bls_results['best_period']:.3f} –¥–Ω–µ–π")
        print(f"   –ú–æ—â–Ω–æ—Å—Ç—å: {bls_results['best_power']:.3f}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–æ—â–Ω–æ—Å—Ç—å > 0.1, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
        if bls_results['best_power'] > 0.1:
            print("   ‚úÖ BLS —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç—Ä–∞–Ω–∑–∏—Ç")
        else:
            print("   ‚ö†Ô∏è  BLS –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç—Ä–∞–Ω–∑–∏—Ç")
    
    # 3. –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
    print("\n3. –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_true = labels
    y_pred = np.random.randint(0, 2, len(labels))  # –°–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_scores = np.random.rand(len(labels))  # –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    
    metrics = calculate_metrics(y_true, y_pred, y_scores)
    
    print(f"   Precision: {metrics['precision']:.3f}")
    print(f"   Recall: {metrics['recall']:.3f}")
    print(f"   F1-Score: {metrics['f1_score']:.3f}")
    print(f"   Accuracy: {metrics['accuracy']:.3f}")
    
    # 4. –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\n4. –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    try:
        plt.figure(figsize=(12, 8))
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        plt.subplot(2, 2, 1)
        plt.plot(data[0])
        plt.title('–ü—Ä–∏–º–µ—Ä —Å–≤–µ—Ç–æ–≤–æ–π –∫—Ä–∏–≤–æ–π')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ü–æ—Ç–æ–∫')
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
        plt.subplot(2, 2, 2)
        plt.hist(labels, bins=2, alpha=0.7)
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤')
        plt.xlabel('–ö–ª–∞—Å—Å (0=–Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Ç–∞, 1=–µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∏—Ç)')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        plt.subplot(2, 2, 3)
        plt.hist(data.flatten(), bins=50, alpha=0.7)
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Ç–æ–∫–∞')
        plt.xlabel('–ü–æ—Ç–æ–∫')
        plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        plt.subplot(2, 2, 4)
        sample_data = data[:10].flatten()
        sample_labels = np.repeat(labels[:10], len(data[0]))
        plt.scatter(sample_data, sample_labels, alpha=0.6)
        plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç–æ–∫')
        plt.xlabel('–ü–æ—Ç–æ–∫')
        plt.ylabel('–ú–µ—Ç–∫–∞')
        
        plt.tight_layout()
        plt.savefig('test_results.png', dpi=150, bbox_inches='tight')
        plt.close()
        
        print("   ‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_results.png")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    print(f"‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(data)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"‚úÖ BLS –∞–ª–≥–æ—Ä–∏—Ç–º: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏: –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–∞")
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    print("–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    
    return True

if __name__ == "__main__":
    test_synthetic_pipeline()
