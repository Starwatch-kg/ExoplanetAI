/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è ExoplanetAI
 * –ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ any —Ç–∏–ø—ã –Ω–∞ —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é
 */

import axios, { AxiosInstance, AxiosResponse, AxiosError, InternalAxiosRequestConfig } from 'axios'
import type { SearchRequest, SearchResult, HealthStatus, CatalogsResponse, ApiError, ApiErrorResponse, SystemStatistics } from '../types/api'

export interface ApiSuccessResponse<T = any> {
  data: T
  status: 'success'
  request_id?: string
}

class TypedApiClient {
  private client: AxiosInstance
  private readonly isDevelopment: boolean

  constructor(baseURL?: string) {
    this.isDevelopment = import.meta.env.DEV
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiUrl = baseURL || (this.isDevelopment 
      ? 'http://localhost:8001/api/v1' 
      : '/api/v1')
    this.client = this.createClient(apiUrl)
    this.setupInterceptors()
  }

  private createClient(baseURL: string): AxiosInstance {
    return axios.create({
      baseURL,
      timeout: 300000, // 5 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }

  private setupInterceptors(): void {
    // Request interceptor —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    this.client.interceptors.request.use(
      (config: InternalAxiosRequestConfig) => {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º request ID –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
        if (config.headers) {
          config.headers['X-Request-ID'] = requestId
        }

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ development
        if (this.isDevelopment && config.url) {
          const sanitizedUrl = this.sanitizeUrl(`${config.baseURL}${config.url}`)
          console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${sanitizedUrl}`)
        }

        return config
      },
      (error: AxiosError) => {
        if (this.isDevelopment) {
          console.error('‚ùå Request Error:', error.message)
        }
        return Promise.reject(this.transformError(error as AxiosError<ApiErrorResponse>))
      }
    )

    // Response interceptor —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    this.client.interceptors.response.use(
      (response: AxiosResponse) => {
        if (this.isDevelopment && response.config.url) {
          const sanitizedUrl = this.sanitizeUrl(`${response.config.baseURL}${response.config.url}`)
          console.log(`‚úÖ API Response: ${response.status} ${sanitizedUrl}`)
        }
        return response
      },
      (error: AxiosError) => {
        if (this.isDevelopment) {
          console.error('‚ùå Response Error:', error.response?.data || error.message)
        }
        return Promise.reject(this.transformError(error as AxiosError<ApiErrorResponse>))
      }
    )
  }

  private sanitizeUrl(url: string): string {
    // –£–¥–∞–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    return url
      .replace(/token=[^&]+/gi, 'token=***')
      .replace(/password=[^&]+/gi, 'password=***')
  }

  private transformError(error: AxiosError<ApiErrorResponse>): ApiError {
    const response = error.response
    const data = response?.data

    return {
      message: data?.message || error.message || 'Unknown API error',
      status: response?.status || 500,
      code: data?.code || response?.statusText,
      details: data?.details,
      requestId: data?.requestId
    }
  }

  // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã API
  async get<T>(url: string, config?: InternalAxiosRequestConfig): Promise<T> {
    try {
      const response = await this.client.get<ApiSuccessResponse<T>>(url, config)
      return response.data.data || response.data as T
    } catch (error) {
      throw error // –£–∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –≤ interceptor
    }
  }

  async post<T>(url: string, data?: any, config?: InternalAxiosRequestConfig): Promise<T> {
    try {
      const response = await this.client.post<ApiSuccessResponse<T>>(url, data, config)
      return response.data.data || response.data as T
    } catch (error) {
      throw error
    }
  }

  async put<T>(url: string, data?: any, config?: InternalAxiosRequestConfig): Promise<T> {
    try {
      const response = await this.client.put<ApiSuccessResponse<T>>(url, data, config)
      return response.data.data || response.data as T
    } catch (error) {
      throw error
    }
  }

  async delete<T>(url: string, config?: InternalAxiosRequestConfig): Promise<T> {
    try {
      const response = await this.client.delete<ApiSuccessResponse<T>>(url, config)
      return response.data.data || response.data as T
    } catch (error) {
      throw error
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è ExoplanetAI API
  async getHealth(): Promise<HealthStatus> {
    return this.get<HealthStatus>('/health')
  }

  async searchExoplanets(request: SearchRequest): Promise<SearchResult> {
    return this.post<SearchResult>('/planets/search', request)
  }

  async getCatalogs(): Promise<CatalogsResponse> {
    return this.get<CatalogsResponse>('/catalogs')
  }

  async validateTarget(targetName: string): Promise<{ valid: boolean; suggestions: string[] }> {
    return this.get<{ valid: boolean; suggestions: string[] }>(`/validate-target?target_name=${encodeURIComponent(targetName)}`)
  }

  async getStatistics(): Promise<SystemStatistics> {
    return this.get<SystemStatistics>('/statistics')
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
export const typedApiClient = new TypedApiClient()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º (–¥–ª—è –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
export const createLongRunningClient = (timeout: number = 600000) => {
  const client = new TypedApiClient('/api/v1')
  // Apply custom timeout to the client
  client['client'].defaults.timeout = timeout
  return client
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è cancel token
export const createCancelToken = () => {
  return axios.CancelToken.source()
}

export default typedApiClient
