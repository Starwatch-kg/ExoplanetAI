# ExoplanetAI Production Docker Compose
# Полный production stack с мониторингом и безопасностью
#
# Сервисы:
# - exoplanet-ai: Основное приложение (FastAPI + React)
# - redis: Кэширование и сессии
# - postgres: База данных (опционально)
# - nginx: Reverse proxy и load balancer
# - prometheus: Метрики и мониторинг
# - grafana: Дашборды и визуализация
# - loki: Централизованное логирование

version: '3.8'

# ===== NETWORKS =====
networks:
  exoplanet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===== VOLUMES =====
volumes:
  # Persistent data
  redis_data:
    driver: local
  postgres_data:
    driver: local
  
  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  
  # Application data
  app_data:
    driver: local
  app_logs:
    driver: local
  app_cache:
    driver: local
  
  # SSL certificates
  ssl_certs:
    driver: local

# ===== SERVICES =====
services:
  
  # ===== MAIN APPLICATION =====
  exoplanet-ai:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: backend-production
    container_name: exoplanet-ai-app
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Environment variables
    environment:
      # Server configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8001
      - ENVIRONMENT=production
      
      # Security
      - SECURITY_ALLOWED_ORIGINS=https://${DOMAIN:-localhost}
      - SECURITY_API_KEY=${SECURITY_API_KEY}
      
      # NASA API keys
      - NASA_API_KEY=${NASA_API_KEY}
      - NASA_ESA_API_KEY=${NASA_ESA_API_KEY}
      
      # Database
      - DB_ENABLED=true
      - DB_URL=postgresql://exoplanet:${POSTGRES_PASSWORD}@postgres:5432/exoplanet_ai
      
      # Cache
      - CACHE_REDIS_URL=redis://redis:6379
      - CACHE_TTL_PLANETS=21600
      - CACHE_TTL_LIGHTCURVES=7200
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # Monitoring
      - PROMETHEUS_ENABLED=true
      - METRICS_PORT=9090
    
    # Volumes
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_cache:/app/cache
    
    # Network
    networks:
      - exoplanet-network
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: exoplanet-ai-redis
    restart: unless-stopped
    
    # Configuration
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    
    # Volumes
    volumes:
      - redis_data:/data
    
    # Network
    networks:
      - exoplanet-network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ===== POSTGRESQL DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: exoplanet-ai-postgres
    restart: unless-stopped
    
    # Environment
    environment:
      - POSTGRES_DB=exoplanet_ai
      - POSTGRES_USER=exoplanet
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    # Network
    networks:
      - exoplanet-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U exoplanet -d exoplanet_ai"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # ===== NGINX REVERSE PROXY =====
  nginx:
    image: nginx:alpine
    container_name: exoplanet-ai-nginx
    restart: unless-stopped
    
    # Ports
    ports:
      - "80:80"
      - "443:443"
    
    # Volumes
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    
    # Network
    networks:
      - exoplanet-network
    
    # Dependencies
    depends_on:
      - exoplanet-ai
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ===== PROMETHEUS MONITORING =====
  prometheus:
    image: prom/prometheus:latest
    container_name: exoplanet-ai-prometheus
    restart: unless-stopped
    
    # Command
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    
    # Volumes
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    
    # Network
    networks:
      - exoplanet-network
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Profiles (optional service)
    profiles:
      - monitoring

  # ===== GRAFANA DASHBOARDS =====
  grafana:
    image: grafana/grafana:latest
    container_name: exoplanet-ai-grafana
    restart: unless-stopped
    
    # Environment
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=https://${DOMAIN:-localhost}/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    
    # Volumes
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    # Network
    networks:
      - exoplanet-network
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Profiles
    profiles:
      - monitoring

  # ===== LOKI LOG AGGREGATION =====
  loki:
    image: grafana/loki:latest
    container_name: exoplanet-ai-loki
    restart: unless-stopped
    
    # Command
    command: -config.file=/etc/loki/local-config.yaml
    
    # Volumes
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    
    # Network
    networks:
      - exoplanet-network
    
    # Profiles
    profiles:
      - logging

  # ===== PROMTAIL LOG COLLECTOR =====
  promtail:
    image: grafana/promtail:latest
    container_name: exoplanet-ai-promtail
    restart: unless-stopped
    
    # Command
    command: -config.file=/etc/promtail/config.yml
    
    # Volumes
    volumes:
      - ./config/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    
    # Network
    networks:
      - exoplanet-network
    
    # Dependencies
    depends_on:
      - loki
    
    # Profiles
    profiles:
      - logging

  # ===== WATCHTOWER AUTO-UPDATES =====
  watchtower:
    image: containrrr/watchtower
    container_name: exoplanet-ai-watchtower
    restart: unless-stopped
    
    # Volumes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    
    # Environment
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # 24 hours
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${NOTIFICATION_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${ADMIN_EMAIL}
    
    # Profiles
    profiles:
      - auto-update

# ===== DEVELOPMENT OVERRIDE =====
# Для development режима создайте docker-compose.override.yml:
#
# version: '3.8'
# services:
#   exoplanet-ai:
#     build:
#       target: development
#     environment:
#       - ENVIRONMENT=development
#       - SERVER_RELOAD=true
#       - LOG_LEVEL=DEBUG
#     volumes:
#       - ./backend:/app:ro
#       - ./frontend/dist:/app/frontend/dist:ro
#     ports:
#       - "8001:8001"
