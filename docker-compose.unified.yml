version: '3.8'

services:
  # ExoplanetAI Unified Application
  exoplanet-ai:
    build:
      context: .
      dockerfile: Dockerfile.unified
    container_name: exoplanet-ai-app
    ports:
      - "8001:8001"
    environment:
      # Server Configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8001
      - SERVER_RELOAD=false
      - ENVIRONMENT=production
      
      # Security
      - SECURITY_ALLOWED_ORIGINS=http://localhost:8001,https://your-domain.com
      - SECURITY_API_KEY=${SECURITY_API_KEY:-demo-key-change-in-production}
      
      # NASA API Keys
      - NASA_API_KEY=${NASA_API_KEY:-DEMO_KEY}
      - NASA_ESA_API_KEY=${NASA_ESA_API_KEY:-your-esa-key}
      
      # Redis Cache
      - CACHE_REDIS_URL=redis://redis:6379
      - CACHE_TTL_PLANETS=21600
      - CACHE_TTL_LIGHTCURVES=7200
      
      # Database
      - DB_ENABLED=true
      - DB_URL=postgresql://exoplanet:${POSTGRES_PASSWORD:-exoplanet123}@postgres:5432/exoplanet_ai
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
    depends_on:
      - redis
      - postgres
    networks:
      - exoplanet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: exoplanet-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - exoplanet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL Database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: exoplanet-ai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=exoplanet_ai
      - POSTGRES_USER=exoplanet
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-exoplanet123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - exoplanet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U exoplanet -d exoplanet_ai"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: exoplanet-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - exoplanet-ai
    networks:
      - exoplanet-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: exoplanet-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - exoplanet-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: exoplanet-ai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - exoplanet-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  exoplanet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
